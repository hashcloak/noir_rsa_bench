{"noir_version":"0.32.0+c679f01a19b02ad2ac2287c8e699b46887f7872c","hash":18162327552509481857,"abi":{"parameters":[],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","file_map":{"23":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field/mod.nr"},"53":{"source":"use dep::bignum::BigNum;\nuse dep::bignum::runtime_bignum::BigNumInstance;\nuse dep::bignum::fields::Params2048;\nuse dep::bignum::fields::Params1024;\nuse dep::rsa::RSA;\n\ntype BN1024 = BigNum<9, Params1024>;\ntype BN2048 = BigNum<18, Params2048>;\ntype BNInst1024 = BigNumInstance<9, Params1024>;\ntype BNInst2048 = BigNumInstance<18, Params2048>;\n\ntype RSA1024 = RSA<BN1024, BNInst1024, 128>;\ntype RSA2048 = RSA<BN2048, BNInst2048, 256>;\n\nfn verify_sha256_pkcs1v15_1024() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let BNInstance: BNInst1024 = BigNumInstance::new(\n        [\n        0xe908724e0d28a1565511879e00f063, 0x58dea28d5112982c8ab8597d3e611f, 0xb115f9878acc910a47b41ac8d5f763, 0xc71b0a719c2283f710f86024737cee, 0x9ee9eb73e95b84f033af5217337427, 0x8fcab34c99cc2661dd57de15ae2110, 0xa38db8a829eec5550342f6f66334dc, 0xd7c4b32fd351a47d860fda1897330e, 0x98c92a33a0f33fd7\n    ],\n        [\n        0x55582e8ba08822783fbd7d07390be2, 0x1d7d83f9dce3983c66f440dcc2f33e, 0x6072d13c84a4cb304f58fbabe782e7, 0x0cee5e0dd62bc54d15a91a4ea3bc50, 0xc485e6f946c45cf660fba4f49325cb, 0x1f0e45df0464b065c94e84ed1dad8c, 0xe4c7b3976310ea239059d834b545f3, 0xd418145200fa77235f5f8d852b121f, 0x01acf0bd16cad9bd8f\n    ]\n    );\n    let signature: BN1024 = BigNum::from_array(\n        [\n        0x393f230b55a12fb7bb39c7edd2cf48, 0x78f7d0a217d340407cae4f39b8f001, 0x603909ff76a519f3c8e96d695d462e, 0x0640ab230b459bf4b20b4823a5b850, 0x02ba190de61a85074b18e228231984, 0xe1424c0779825707aa433ecb86c388, 0xbed8087d947a9c6c56625ad20c91aa, 0x7da4a0c2eee3a3c0d61e892ab4ada9, 0x6ef98a936c8bf8e5\n    ]\n    );\n\n    let rsa: RSA1024 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));\n}\n\nfn verify_sha256_pkcs1v15_2048() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    let BNInstance: BNInst2048 = BigNumInstance::new(\n        [\n        0x183b4cadacea64716b6535b25a86ad, 0x129a32e9fbd374949e81b080546c2b, 0x9276332765f54b9b4d6fe23f4983a4, 0x91df05fde1a414c9fbf38808a01032, 0x97ca171c382e082ddd6c81be090902, 0x97161dde47ed979939451704b72648, 0x3b66f0c93f8ddbc62bb99f6b8fad2d, 0xc3a046fcad814d8938da372cd84d2a, 0xfe903cfe3ee4de6de3916023bb87f2, 0x8be5fd99c8b46dce9aab27ce4b3883, 0x0d99dfe50dd2288123804872da8543, 0xbb6d8afef8b2c7e3b86ad96973d4e5, 0x17e08fa3c5391279b844581f67825c, 0x09511f4a436abe495bfbfcc254d9c5, 0xf80d02572d620eab5ad7ecfbe2c20c, 0x2a5307402a05f59ba232ad0c8366d0, 0x7b9169630b317c38d549a86f85fcfc, 0xf2\n    ],\n        [\n        0xf4effa025abe90db41dc5bb5934a5f, 0x2596b25aa09f6a0e290accebbef006, 0x330e9567ec5eca92b7a8ce72ad3d83, 0xccf98d178ec4017e4947cadc02da7c, 0xaed6044ffeeb12de4d1e67aedfda78, 0xb5ae8a5a4637b632800e2f41dfbf0a, 0x8304360d359cf2f0d5d97c039f9b04, 0x53cde0d0633c0e66e1da9a118f6a96, 0xf9a83822351097bb1ed123d10290f5, 0xeb489c7f7227c09ca0117264dcf04f, 0x6a1b3618478a235f438adf84533177, 0x71c03085e38a87f5ec8e51c27dde98, 0xcf3e89d9cf253ef61d65d4431334d9, 0xa5a1a59e98fb7f49c746149324201d, 0x38f46c635f884f24c254eaa37981d6, 0x1c42be15dd95e1ac5bf01972b24ff9, 0x4555dd506d1f89e61279293c03db90, 0x010e\n    ]\n    );\n    let signature: BN2048 = BigNum::from_array(\n        [\n        0x5f0937ed1aacbdb83991e21c89ca8a, 0x5a1fa4ef2faf4042401c9121c73874, 0x7379fbb7713fbf807d250f7401afb8, 0x9cc5ce8813f3a83a72b681a4d434b2, 0x11cb49ac2ee1f9bed8a008b8327e1e, 0xf3362524f1224e48827b34a62f6ace, 0x3498a2944e32a3798fe9da684b32ae, 0xc346c33528bcdf7a06805126a29402, 0x6ac93f2fa68f270ec73674eae24380, 0x222c72de080496533ceeb8af827910, 0xc22889b311a53203278b942ca67100, 0x93d75567f7fe9ee7ca9871a0cb09f9, 0x049dabd976a9574847b1614f6b739c, 0xdc66b621dbae623df9b657b52fa1b0, 0xf37e82cc1eced382e11fc32e673f67, 0xe50545eb9027f1144a0ba7bbb0c886, 0xb6193409539c515d3c55a45c5734b1, 0x4b\n    ]\n    );\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));\n}\n\nfn main() {\n    verify_sha256_pkcs1v15_1024();\n}\n","path":"/home/hdvanegasm/Documents/hashcloak/aztec/noir_rsa_bench/src/main.nr"},"64":{"source":"use dep::std;\nuse crate::utils::u60_representation::U60Repr;\nuse crate::utils::arrayX::ArrayX;\nuse crate::utils::split_bits;\nuse crate::BigNum;\n\n/**\n * @brief runtime_bignum::BigNumTrait defines methods available to BigNum *if* the modulus is not known at compile time.\n *        e.g. RSA where the modulus is a witness value as it changes for every RSA signature\n *        tee `lib.nr` for a trait definition where the modulus is known at compile time\n **/\ntrait BigNumTrait {\n    fn new() -> Self;\n    fn one() -> Self;\n    fn from(limbs: [Field]) -> Self;\n    fn from_byte_be<let NBytes: u32>(x: [u8; NBytes]) -> Self;\n    fn to_le_bytes<let NBytes: u32>(val: Self) -> [u8; NBytes];\n    fn get(self) -> [Field];\n    fn get_limb(self, idx: u64) -> Field;\n    fn set_limb(&mut self, idx: u32, value: Field);\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    fn validate_in_range(self);\n    fn validate_quotient_in_range(self);\n    fn __is_zero(self) -> bool;\n    fn __eq(self, rhs: Self) -> bool;\n}\n\n/**\n * @brief BigNumInstanceTrait defines methods available to a runtime BigNumInstance.\n *        BigNumInstance wraps the modulus parameter (as well as a Barret reduction parameter),\n *        which is required for the majority of BigNum operations\n **/\ntrait BigNumInstanceTrait<BN> where BN: BigNumTrait {\n    fn modulus(self) -> BN;\n    fn __derive_from_seed<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BN;\n    fn eq(self, lhs: BN, rhs: BN) -> bool;\n    fn __neg(self, val: BN) -> BN;\n    fn __add(self, lhs: BN, rhs: BN) -> BN;\n    fn __sub(self, lhs: BN, rhs: BN) -> BN;\n    fn __mul(self, lhs: BN, rhs: BN) -> BN;\n    fn __div(self, lhs: BN, rhs: BN) -> BN;\n    fn __batch_invert<let M: u32>(self, x: [BN; M]) -> [BN; M];\n    fn __batch_invert_slice(self, x: [BN]) -> [BN];\n    fn __udiv_mod(self, numerator: BN, divisor: BN) -> (BN, BN);\n    fn __invmod(self, val: BN) -> BN;\n    fn __pow(self, val: BN, exponent: BN) -> BN;\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BN; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BN; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BN; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BN, BN);\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BN; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BN; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BN; ADD_N],\n        linear_flags: [bool; ADD_N]\n    );\n\n    fn validate_in_field(self, val: BN);\n    fn validate_gt(self, lhs: BN, rhs: BN);\n    fn assert_is_not_equal(self, lhs: BN, rhs: BN);\n    fn neg(self, val: BN) -> BN;\n    fn add(self, lhs: BN, rhs: BN) -> BN;\n    fn sub(self, lhs: BN, rhs: BN) -> BN;\n    fn mul(self, lhs: BN, rhs: BN) -> BN;\n    fn div(self, lhs: BN, rhs: BN) -> BN;\n    fn udiv_mod(self, numerator: BN, divisor: BN) -> (BN, BN);\n    fn udiv(self, numerator: BN, divisor: BN) -> BN;\n    fn umod(self, numerator: BN, divisor: BN) -> BN;\n\n}\n\n/**\n * @brief BigNumParamsTrait defines a \"field\" with which to parametrise BigNum.\n * @description The \"field\" does not need to be prime, any value *should* work (TODO: test!)\n**/\ntrait BigNumParamsTrait<let N: u32> {\n    /**\n     * @brief modulus_bits = log2(modulus) rounded up\n     **/\n    fn modulus_bits() -> u32;\n\n    fn has_multiplicative_inverse() -> bool { true }\n}\n\nstruct BigNumInstance<let N: u32, Params> {\n    \n    /**\n     * @brief modulus: all BigNum operations are evaluated modulo this value\n     **/\n    modulus: [Field; N],\n\n    /**\n     * @brief modulus but represented in a U60Repr form\n     **/\n    modulus_u60: U60Repr<N, 2>,\n    modulus_u60_x4: U60Repr<N, 4>,\n\n    // /**\n    //  * @brief double_modulus: used when performing negations and subtractions\n    //  **/\n    double_modulus: [Field; N],\n    // /**\n    //  * @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    //  **/\n    redc_param: [Field; N],\n}\n\nimpl<let N: u32, Params> BigNum<N, Params> {\n    // some strange circular dependency problem means we need to define `new` as a member of BigNumTrait as well as a definition outside of the trait\n    // (delete this method to see. BigNumInstance methods that use BigNum::new() error out, and I can't find a way of declaring BigNum to satisfy BigNumTrait as part of the BigNumInstance definition because BigNumInstance has no contextual knowledge of the BigNum type...)\n    fn new() -> Self {\n        BigNum { limbs: [0; N] }\n    }\n    fn one() -> BigNum<N, Params> {\n        let mut result: Self = BigNum { limbs: [0; N] };\n        result.limbs[0] = 1;\n        result\n    }\n}\n\nimpl<let N: u32, Params> BigNumTrait for BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn new() -> Self {\n        BigNum::new()\n    }\n    fn one() -> Self {\n        BigNum::one()\n    }\n\n    fn from(limbs: [Field]) -> Self { BigNum{ limbs: limbs.as_array() }}\n\n    /**\n     * @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n     * @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n     *               is precisely large enough to cover Params::modulus_bits()\n     * @param x: input byte array\n     **/\n    fn from_byte_be<let NBytes: u32>(x: [u8; NBytes]) -> BigNum<N, Params> {\n        let num_bits = NBytes * 8;\n        let modulus_bits = Params::modulus_bits();\n        assert(num_bits > modulus_bits);\n        assert(num_bits - modulus_bits < 8);\n        let mut result = BigNum::new();\n\n        let excess_bytes = N * 15 - NBytes;\n        let final_limb_bytes = 15 - excess_bytes;\n        let mut limb: Field = 0;\n        let mut k = 0;\n        for _j in 0..final_limb_bytes {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result.limbs[N - 1] = limb;\n\n        for i in 1..N {\n            let mut limb: Field = 0;\n            for _j in 0..15 {\n                limb *= 256;\n                limb += x[k] as Field;\n                k += 1;\n            }\n            result.limbs[N - i - 1] = limb;\n        }\n\n        // max_bits_in_most_significant_byte should be known at comptime. if not...messy!\n        let mut max_bits_in_most_significant_byte = num_bits - modulus_bits;\n        if num_bits == modulus_bits {\n            max_bits_in_most_significant_byte = 8;\n        }\n\n        let most_significant_byte: Field = x[NBytes - 1] as Field;\n        most_significant_byte.assert_max_bit_size(max_bits_in_most_significant_byte as u32);\n        result\n    }\n\n    fn to_le_bytes<let NBytes: u32>(val: BigNum<N, Params>) -> [u8; NBytes] {\n        let nbytes = (Params::modulus_bits() / 8) + (Params::modulus_bits() % 8 != 0) as u32;\n        assert(nbytes <= NBytes);\n\n        let mut result: [u8; NBytes] = [0; NBytes];\n        for i in 0..N - 1 {\n            let limb_bytes = val.limbs[i].to_le_bytes(15);\n            for j in 0..15 {\n                result[i * 15 + j] = limb_bytes[j];\n            }\n        }\n        let last_limb_bytes = val.limbs[N - 1].to_le_bytes(15);\n        let num_last_bytes = (NBytes - (N - 1) * 15);\n        for i in 0..num_last_bytes {\n            result[(N-1) * 15 + i] = last_limb_bytes[i];\n        }\n        result\n    }\n\n    fn get(self) -> [Field] {\n        self.limbs\n    }\n    fn get_limb(self, idx: u64) -> Field {\n        self.limbs[idx]\n    }\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    /**\n     * @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n     * @description should be cheaper than using an IF statement (TODO: check!)\n     **/\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let mut result: Self = lhs;\n        for i in 0..N {\n            result.limbs[i] = (lhs.limbs[i] - rhs.limbs[i]) * predicate as Field + rhs.limbs[i];\n        }\n        result\n    }\n\n    /**\n     * @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n     **/\n    fn validate_in_range(self) {\n        for i in 0..(N - 1) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120);\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    /**\n     * @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n     * @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n     *              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n     *              Why is this?\n     *              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n     *                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n     *                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n     *              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n     *\n     *              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n     *              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n     **/\n    fn validate_quotient_in_range(self) {\n        for i in 0..(N) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        // Note: replace magic number 6 with definition\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120) + 6;\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    fn __is_zero(self) -> bool {\n        self.__is_zero_impl()\n    }\n\n    fn __eq(self, rhs: Self) -> bool {\n        self.__eq_impl(rhs)\n    }\n}\n\nimpl<let N: u32, Params> BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn from_array(limbs: [Field; N]) -> BigNum<N, Params> {\n        BigNum { limbs }\n    }\n\n    unconstrained fn __is_zero_impl(self) -> bool {\n        let mut result: bool = true;\n        for i in 0..N {\n            result = result & (self.limbs[i] == 0);\n        }\n        result\n    }\n\n    unconstrained fn __eq_impl(lhs: Self, rhs: Self) -> bool {\n        lhs.limbs == rhs.limbs\n    }\n}\n\nimpl<let N: u32, Params,> BigNumInstanceTrait<BigNum<N, Params>> for BigNumInstance<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn modulus(self) -> BigNum<N, Params> { BigNum{ limbs: self.modulus } }\n    fn __derive_from_seed<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BigNum<N, Params> {\n        self.__derive_from_seed_impl(seed)\n    }\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ### NOTE: these functions call unconstrained internal implementations because trait impl modifiers are not supported \n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    fn __neg(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__neg_impl(val)\n    }\n\n    fn __add(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__add_impl(lhs, rhs)\n    }\n\n    fn __sub(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__sub_impl(lhs, rhs)\n    }\n\n    fn __mul(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__mul_impl(lhs, rhs)\n    }\n\n    fn __div(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__div_impl(lhs, rhs)\n    }\n\n    fn __batch_invert<let M: u32>(self, x: [BigNum<N, Params>; M]) -> [BigNum<N, Params>; M] {\n        self.batch_invert_impl(x)\n    }\n\n    // n.b. needs to be declared unconstrained because we return a slice from an unconstrained runtime\n    unconstrained fn __batch_invert_slice(self, x: [BigNum<N, Params>]) -> [BigNum<N, Params>] {\n        self.batch_invert_slice_impl(x)\n    }\n\n    fn __invmod(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__invmod_impl(val)\n    }\n\n    fn __pow(self, val: BigNum<N, Params>, exponent: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__pow_impl(val, exponent)\n    }\n\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n            self,\n            lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n            lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n            rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n            rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n            linear_terms: [BigNum<N, Params>; ADD_N],\n            linear_flags: [bool; ADD_N]\n        ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n            self.__compute_quadratic_expression_impl(\n                lhs_terms,\n                lhs_flags,\n                rhs_terms,\n                rhs_flags,\n                linear_terms,\n                linear_flags\n            )\n    }\n\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n\n    /**\n     * @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n     * @description The expression is of the form (when evaluated as an integer relation):\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * Note: this method requires the remainder term of the expression to be ZERO\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The expensive parts of this algorithm are the following:\n     *      1. evaluating the limb products required to compute `lhs * rhs`\n     *      2. applying range constraints to validate the result is 0\n     *\n     * Range constraints are needed for the following reason:\n     * When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n     * Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n     * Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n     * To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n     * (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n     * To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n     * We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n     * TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n     * I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n     * TODO: explain why we apply a 126-bit range check, this feels like a magic number\n     * (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n     * TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n     * \n     * @param lhs_terms a 2D array of BigNum\n     * @param lhs_flags a 2D array of sign flags\n     * @param rhs_terms a 2D array of BigNum\n     * @param rhs_flags a 2D array of sign flags\n     * @param linear_terms an array of BigNum\n     * @param linear_flags an array of sign flags\n     **/\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) {\n        // use an unconstrained function to compute the value of the quotient\n        let (quotient, _, borrow_flags): (BigNum<N, Params>, BigNum<N, Params>, ArrayX<Field, N, 2>) = self.__compute_quadratic_expression_with_borrow_flags(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n        // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n        quotient.validate_quotient_in_range();\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        // (should be a compile-time check...unconstrained function?)\n\n        // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n        let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t4: [Field; N] = [0; N];\n\n        // TODO: this is super nasty as it requires a multiplication\n        let double_modulus: [Field; N] = self.double_modulus;\n        for k in 0..NUM_PRODUCTS {\n            for i in 0..N {\n                for j in 0..LHS_N {\n                    // note: if is_negative is not known at comptime this is very expensive\n                    if (lhs_flags[k][j]) {\n                        t0[k][i] -= lhs_terms[k][j].limbs[i];\n                        t0[k][i] += double_modulus[i];\n                    } else {\n                        t0[k][i] += lhs_terms[k][j].limbs[i];\n                    }\n                }\n                for j in 0..RHS_N {\n                    if (rhs_flags[k][j]) {\n                        t1[k][i] -= rhs_terms[k][j].limbs[i];\n                        t1[k][i] += double_modulus[i];\n                    } else {\n                        t1[k][i] += rhs_terms[k][j].limbs[i];\n                    }\n                }\n            }\n        }\n        for i in 0..N {\n            for j in 0..ADD_N {\n                if (linear_flags[j]) {\n                    t4[i] -= linear_terms[j].limbs[i];\n                    t4[i] += double_modulus[i];\n                } else {\n                    t4[i] += linear_terms[j].limbs[i];\n                }\n            }\n        }\n\n        // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n        // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n        // so that we can ensure that no limbs will underflow for an honest Prover\n        let mut product_limbs: ArrayX<Field, N,2> = ArrayX::new();\n        //       let fff: [Field; N] = quotient.limbs;\n        //      let mut borrow_flags: ArrayX<Field, N,2> = BigNum::get_borrow_flags3(t0, t1, t2, t3, t4, fff, self.modulus);\n\n        // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n        // TODO: this is super nasty as it requires a multiplication\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    if k == 0 {\n                        let new_term = t0[k][i] * t1[k][j] - quotient.limbs[i] * self.modulus[j];\n                        std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                        product_limbs.add_assign(i + j, new_term);\n                    } else {\n                        product_limbs.add_assign(i + j, t0[k][i] * t1[k][j]);\n                    }\n                }\n                if (NUM_PRODUCTS == 0) {\n                    product_limbs.sub_assign(i + j, quotient.limbs[i] * self.modulus[j]);\n                }\n            }\n            product_limbs.add_assign(i, t4[i]);\n        }\n\n        // each limb product represents the sum of 120-bit products.\n        // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n        // where no more than 64 limb products are summed together.\n        // TODO: check in unconstrained function that this condition is satisfied\n        // TODO: define trade-offs regarding the value of borrow_shift\n        // (the larger the value, the greater the range check that is required on product_limbs)\n        // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n        // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n\n        // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n        //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n        // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n        borrow_flags.get(0).assert_max_bit_size(1);\n        product_limbs.add_assign(0, borrow_flags.get(0) * borrow_shift);\n        for i in 1..(N + N - 2) {\n            borrow_flags.get(i).assert_max_bit_size(1);\n            product_limbs.add_assign(\n                i,\n                (borrow_flags.get(i) * borrow_shift - borrow_flags.get(i - 1) * borrow_carry)\n            );\n        }\n        product_limbs.sub_assign(N + N - 2, borrow_flags.get(N + N - 3) * borrow_carry);\n\n        // Final step: Validate `product_limbs` represents the integer value `0`\n        // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n        // i.e. we need to do the following for each limb `i`:\n        //      1. validate the limb's low-120 bits equals zero\n        //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n        //      3. add the carry into limb `i+1`\n        // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n        // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n        // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n        //  where k is the number of bits in the prime field)\n        // We then add the result into the next limb and repeat.\n        let hi_shift: Field = 0x1000000000000000000000000000000;\n        let hi_downshift: Field = 1 / hi_shift;\n        for i in 0..N + N - 2 {\n            product_limbs.mul_assign(i, hi_downshift);\n            std::as_witness(product_limbs.get(i));\n            product_limbs.get(i).assert_max_bit_size(126); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n            product_limbs.add_assign(i + 1, product_limbs.get(i));\n        }\n        // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n        assert(product_limbs.get(N + N - 2) == 0);\n    }\n\n    fn validate_in_field(self, val: BigNum<N, Params>) {\n        // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n        let mut p_minus_self: [Field; N] = [0; N];\n        let modulus: [Field; N] = self.modulus;\n        for i in 0..N {\n            p_minus_self[i] = modulus[i] - val.limbs[i];\n        }\n        let borrow_flags = self.__validate_in_field_compute_borrow_flags(val);\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        p_minus_self[0] += borrow_flags[0] as Field * two_pow_120;\n        for i in 1..N - 1 {\n            p_minus_self[i] += (borrow_flags[i] as Field * two_pow_120 - borrow_flags[i-1] as Field);\n        }\n        p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n        let mut compare = val;\n        compare.limbs = p_minus_self;\n        compare.validate_in_range();\n    }\n\n    /**\n     * @brief Validate self != other\n     * @details If A == B, then A == B mod N.\n     *          We can efficiently evaluate A == B mod N where N = circuit modulus\n     *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n     *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n     *          (todo: compute how tiny)\n     **/\n    fn assert_is_not_equal(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) {\n        let mut l: Field = 0;\n        let mut r: Field = 0;\n        let mut modulus_mod_n: Field = 0;\n        let mut two_pow_120: Field = 0x1000000000000000000000000000000;\n        let modulus = self.modulus;\n        for i in 0..N {\n            l *= two_pow_120;\n            r *= two_pow_120;\n            modulus_mod_n *= two_pow_120;\n            l += lhs.limbs[N - i - 1];\n            r += rhs.limbs[N - i - 1] ;\n            modulus_mod_n += modulus[N - i - 1];\n        }\n\n        // lhs can be either X mod N or P + X mod N\n        // rhs can be either Y mod N or P + Y mod N\n        // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n        let mut diff = l - r;\n        let mut target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n        assert(target != 0, \"asssert_is_not_equal fail\");\n    }\n\n    fn eq(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> bool {\n        let diff = self.sub(lhs, rhs);\n        // if self == other, possible values of `diff` will be `p` or `0`\n        // (the subtract operator constrains diff to be < ceil(log(p)))\n        // TODO: can do this more efficiently via witngen in unconstrained functions?\n        let mut is_equal_modulus: bool = true;\n        let mut is_equal_zero: bool = true;\n        for i in 0..N {\n            is_equal_modulus = is_equal_modulus & (diff.limbs[i] == self.modulus[i]);\n            is_equal_zero = is_equal_zero & (diff.limbs[i] == 0);\n        }\n        is_equal_modulus | is_equal_zero\n    }\n\n    fn neg(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = self.__neg_with_flags(val);\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let result_limb = modulus[0] - val.limbs[0] - result.limbs[0] + (borrow_flags[0] as Field * borrow_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] - val.limbs[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + (borrow_flags[i] as Field * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = modulus[N - 1] - val.limbs[N - 1] - result.limbs[N - 1] - borrow_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n\n    fn add(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) = self.__add_with_flags(lhs, rhs);\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut subtrahend: [Field; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let result_limb = lhs.limbs[0] + rhs.limbs[0] - subtrahend[0] - result.limbs[0]\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] + rhs.limbs[i]\n                - subtrahend[i]\n                - result.limbs[i]\n                - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] + rhs.limbs[N - 1]\n            - subtrahend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n\n    // validate that lhs - rhs does not underflow i.e. lhs > rhs\n    fn validate_gt(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) {\n        // so we do... p - x - r = 0 and there might be borrow flags\n\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags) = self.__validate_gt_remainder(lhs, rhs);\n\n        result.validate_in_range();\n\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut addend: [Field; N] = [0; N];\n        let result_limb = lhs.limbs[0] - rhs.limbs[0] + addend[0] - result.limbs[0] - 1\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] - rhs.limbs[i] + addend[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] - rhs.limbs[N - 1] + addend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n    }\n\n    fn sub(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) = self.__sub_with_flags(lhs, rhs);\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut addend: [Field; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n        let result_limb = lhs.limbs[0] - rhs.limbs[0] + addend[0] - result.limbs[0]\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] - rhs.limbs[i] + addend[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] - rhs.limbs[N - 1] + addend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let result = self.__mul(lhs, rhs);\n        self.evaluate_quadratic_expression([[lhs]], [[false]], [[rhs]], [[false]], [result], [true]);\n        result\n    }\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        assert(Params::has_multiplicative_inverse(), \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\");\n        let result = self.__div(lhs, rhs);\n        self.evaluate_quadratic_expression([[result]], [[false]], [[rhs]], [[false]], [lhs], [true]);\n        result\n    }\n\n    /**\n     * @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n     *\n     * i.e. 1. floor(numerator / divisor) = quotient\n     *      2. numerator % divisor = remainder\n     *      3. divisor * quotient + remainder = numerator\n     **/\n    fn __udiv_mod(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        self.__udiv_mod_impl(numerator, divisor)\n    }\n    /**\n     * @brief udiv_mod performs integer division between numerator, divisor \n     *\n     * i.e. 1. floor(numerator / divisor) = quotient\n     *      2. numerator % divisor = remainder\n     *      3. divisor * quotient + remainder = numerator\n     **/\n    fn udiv_mod(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let (quotient, remainder) = BigNumInstance::__udiv_mod_impl(self, numerator, divisor);\n\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        self.evaluate_quadratic_expression(\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false]\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        self.validate_gt(divisor, remainder);\n        (quotient, remainder)\n    }\n\n    /**\n     * @brief udiv_mod performs integer division between numerator, divisor \n     *\n     * i.e. return param is floor(numerator / divisor)\n     **/\n    fn udiv(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.udiv_mod(numerator, divisor).0\n    }\n\n    /**\n     * @brief udiv_mod performs integer modular reduction\n     *\n     * i.e. 1. numerator % divisor = return value\n     **/\n    fn umod(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.udiv_mod(numerator, divisor).1\n    }\n\n}\n\nimpl<let N: u32, Params> BigNumInstance<N, Params> where Params: BigNumParamsTrait<N> {\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C  O  N  S  T  R  U  C  T  O  R  S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    fn new(modulus: [Field; N], redc_param: [Field; N]) -> Self {\n        Self {\n            redc_param,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus)\n        }\n    }\n\n    unconstrained fn __derive_from_seed_impl<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BigNum<N, Params> {\n        let mut rolling_seed = seed;\n\n        let mut to_reduce: ArrayX<Field, N, 2> = ArrayX { segments: [[0; N], [0; N]] };\n\n        let mut double_modulus_bits = Params::modulus_bits() * 2;\n        let mut double_modulus_bytes = (double_modulus_bits) / 8 + (double_modulus_bits % 8 != 0) as u32;\n\n        let mut last_limb_bytes = double_modulus_bytes % 15;\n        if (last_limb_bytes == 0) {\n            last_limb_bytes = 15;\n        }\n        let mut last_limb_bits = double_modulus_bits % 8;\n        if (last_limb_bits == 0) {\n            last_limb_bits = 8;\n        }\n\n        for i in 0..(N - 1) {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut lo: Field = 0;\n            let mut hi: Field = 0;\n            for j in 0..15 {\n                hi *= 256;\n                lo *= 256;\n\n                if (i < 2 * N - 2) {\n                    lo += hash[j + 15] as Field;\n                    hi += hash[j] as Field;\n                }\n            }\n            to_reduce.set(2 * i, lo);\n            to_reduce.set(2 * i + 1, hi);\n            rolling_seed[0] += 1;\n        }\n\n        {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut hi: Field = 0;\n            for j in 0..(last_limb_bytes - 1) {\n                hi *= 256;\n                hi += hash[j] as Field;\n            }\n            hi *= 256;\n            let last_byte = hash[last_limb_bytes - 1];\n            let mask = (1 as u64 << (last_limb_bits) as u8) - 1;\n            let last_bits = last_byte as u64 & mask;\n            hi += last_bits as Field;\n            to_reduce.set(2 * N - 2, hi);\n        }\n\n        let (_, remainder) = __barrett_reduction(\n            to_reduce,\n            self.redc_param,\n            Params::modulus_bits(),\n            self.modulus,\n            self.modulus_u60_x4\n        );\n        let mut result = BigNum::new();\n        result.limbs = remainder;\n        result\n    }\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    unconstrained fn __validate_in_field_compute_borrow_flags(self: Self, val: BigNum<N, Params>) -> [bool; N] {\n        let mut flags: [bool; N] = [false; N];\n        let modulus: [Field; N] = self.modulus;\n        flags[0] = modulus[0].lt(val.limbs[0]);\n        for i in 1..N - 1 {\n            flags[i] = modulus[i].lt(val.limbs[i] + flags[i - 1] as Field);\n        }\n        flags\n    }\n\n    unconstrained fn __pow_impl(self, val: BigNum<N, Params>, exponent: BigNum<N, Params>) -> BigNum<N, Params> {\n        let x: U60Repr<N, 2> = U60Repr::from(exponent.limbs);\n\n        let num_bits = Params::modulus_bits() + 1;\n\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n\n        for i in 0..num_bits {\n            accumulator = self.__mul(accumulator, accumulator);\n            if x.get_bit(num_bits - i - 1) {\n                accumulator = self.__mul(accumulator, val);\n            }\n        }\n        accumulator\n    }\n\n    unconstrained fn __mul_with_quotient(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let mut mul: ArrayX<Field, N, 2> = ArrayX::new();\n        for i in 0..N {\n            for j in 0..N {\n                mul.add_assign(i + j, lhs.limbs[i] * rhs.limbs[j]);\n            }\n        }\n        let (q, r) = __barrett_reduction(\n            mul.__normalize_limbs(N + N),\n            self.redc_param,\n            Params::modulus_bits(),\n            self.modulus,\n            self.modulus_u60_x4\n        );\n\n        let mut quotient = BigNum::from_array(q);\n        let mut remainder = BigNum::from_array(r);\n        (quotient, remainder)\n    }\n\n    unconstrained fn __mul_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let (_, b) = self.__mul_with_quotient(lhs, rhs);\n        b\n    }\n\n    unconstrained fn __add_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let y_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let mut z_u60 = x_u60 + y_u60;\n\n        if z_u60.gte(self.modulus_u60) {\n            z_u60 = z_u60 - self.modulus_u60;\n        }\n        let mut result = BigNum::from_array(U60Repr::into(z_u60));\n        result\n    }\n\n    /**\n     * @brief given an input `x`, compute `2p - x` (unconstrained)\n     *\n     * @description we subtract the input from double the modulus, because all constrained BigNum operations\n     *              only guarantee that the output is in the range [0, ceil(log2(p))].\n     *              I.E. the input may be larger than the modulus `p`.\n     *              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n     *              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n     *              because such a check is expensive and usually unneccesary.\n     */\n    unconstrained fn __neg_impl(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        let f: [Field; N] = val.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let mut result = BigNum::from_array(U60Repr::into(self.modulus_u60 - x_u60));\n        result\n    }\n\n    unconstrained fn __add_with_flags(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N], bool) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n        let add_u60 = a_u60 + b_u60;\n\n        let overflow = add_u60.gte(self.modulus_u60);\n\n        let mut subtrahend_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        if overflow {\n            subtrahend_u60 = self.modulus_u60;\n        }\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                let mut add_term: u64 = a_u60.limbs.segments[j][i] + b_u60.limbs.segments[j][i] + carry_in;\n                carry = (add_term >= 0x1000000000000000) as u64;\n                add_term -= (carry as u64 * 0x1000000000000000);\n                result_u60.limbs.segments[j][i] = add_term;\n                carry_in = carry as u64;\n                borrow = ((subtrahend_u60.limbs.segments[j][i] + borrow_in) > result_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + result_u60.limbs.segments[j][i]\n                    - subtrahend_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    if (carry & borrow == 1) {\n                        carry = 0;\n                        borrow = 0;\n                    }\n                    carry_flags[idx] = carry as bool;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n\n        (result, carry_flags, borrow_flags, overflow)\n    }\n\n    unconstrained fn __validate_gt_remainder(\n        _: Self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N]) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let mut b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let underflow = b_u60.gte(a_u60);\n        b_u60 += U60Repr::one();\n        assert(underflow == false, \"BigNum::validate_gt check fails\");\n        let mut addend_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                let mut add_term: u64 = a_u60.limbs.segments[j][i] + addend_u60.limbs.segments[j][i] + carry_in;\n                carry = (add_term >= 0x1000000000000000) as u64;\n                add_term -= (carry as u64 * 0x1000000000000000);\n                result_u60.limbs.segments[j][i] = add_term;\n                carry_in = carry as u64;\n                borrow = ((b_u60.limbs.segments[j][i] + borrow_in) > result_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + result_u60.limbs.segments[j][i]\n                    - b_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    if (carry & borrow == 1) {\n                        carry = 0;\n                        borrow = 0;\n                    }\n                    carry_flags[idx] = carry as bool;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, carry_flags, borrow_flags)\n    }\n\n\n    unconstrained fn __sub_with_flags(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N], bool) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n        let mut addend_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        if underflow {\n            addend_u60 = self.modulus_u60;\n        }\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                let mut add_term: u64 = a_u60.limbs.segments[j][i] + addend_u60.limbs.segments[j][i] + carry_in;\n                carry = (add_term >= 0x1000000000000000) as u64;\n                add_term -= (carry as u64 * 0x1000000000000000);\n                result_u60.limbs.segments[j][i] = add_term;\n                carry_in = carry as u64;\n                borrow = ((b_u60.limbs.segments[j][i] + borrow_in) > result_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + result_u60.limbs.segments[j][i]\n                    - b_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    if (carry & borrow == 1) {\n                        carry = 0;\n                        borrow = 0;\n                    }\n                    carry_flags[idx] = carry as bool;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, carry_flags, borrow_flags, underflow)\n    }\n\n    unconstrained fn __neg_with_flags(self, val: BigNum<N, Params>) -> (BigNum<N, Params>, [bool; N]) {\n        let f: [Field; N] = val.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        let mut borrow_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                borrow = ((x_u60.limbs.segments[j][i] + borrow_in) > self.modulus_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + self.modulus_u60.limbs.segments[j][i]\n                    - x_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, borrow_flags)\n    }\n\n    /**\n     * @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n     * @description see `__neg` for why we use 2p instead of p\n     **/\n    unconstrained fn __sub_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__add(lhs, self.__neg(rhs))\n    }\n\n    unconstrained fn __invmod_impl(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        let one: BigNum<N, Params> = BigNum::one();\n        let one_u60: U60Repr<N, 2> = U60Repr::from(one.limbs);\n        let exponent = self.modulus_u60.sub(one_u60.add(one_u60));\n        let mut result = BigNum::from_array(U60Repr::into(exponent));\n        self.__pow(val, result)\n    }\n\n    unconstrained fn batch_invert_impl<let M: u32>(self, x: [BigNum<N, Params>; M]) -> [BigNum<N, Params>; M] {\n        // TODO: ugly! Will fail if input slice is empty\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n        let mut result: [BigNum<N, Params>; M] = [BigNum::new(); M];\n        let mut temporaries: [BigNum<N, Params>] = &[];\n        for i in 0..x.len() {\n            temporaries = temporaries.push_back(accumulator);\n            if (x[i].__is_zero() == false) {\n                accumulator = self.__mul(accumulator, x[i]);\n            }\n        }\n\n        accumulator = self.__invmod(accumulator);\n        let mut T0: BigNum<N, Params> = BigNum::new();\n        T0.limbs = [0; N];\n        for i in 0..x.len() {\n            let idx = x.len() - 1 - i;\n            if (x[idx].__is_zero() == false) {\n                T0 = self.__mul(accumulator, temporaries[idx]);\n                accumulator = self.__mul(accumulator, x[idx]);\n                result[idx] = T0;\n            }\n        }\n        result\n    }\n\n    unconstrained fn batch_invert_slice_impl(self, x: [BigNum<N, Params>]) -> [BigNum<N, Params>] {\n        // TODO: ugly! Will fail if input slice is empty\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n        let mut result: [BigNum<N, Params>] = [BigNum::new()];\n        let mut temporaries: [BigNum<N, Params>] = &[];\n        for i in 0..x.len() {\n            temporaries = temporaries.push_back(accumulator);\n            if (x[i].__is_zero() == false) {\n                accumulator = self.__mul(accumulator, x[i]);\n            }\n            result = result.push_back(BigNum::new());\n        }\n\n        accumulator = self.__invmod(accumulator);\n        let mut T0: BigNum<N, Params> = BigNum::new();\n        T0.limbs = [0; N];\n        for i in 0..x.len() {\n            let idx = x.len() - 1 - i;\n            if (x[idx].__is_zero() == false) {\n                T0 = self.__mul(accumulator, temporaries[idx]);\n                accumulator = self.__mul(accumulator, x[idx]);\n                result[idx] = T0;\n            }\n        }\n        result\n    }\n\n    unconstrained fn __div_impl(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        let t0 = self.__invmod(divisor);\n        self.__mul(numerator, t0)\n    }\n\n    /**\n     * @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n     **/\n    // NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n    // To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n    // We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n    // Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n    // Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\n    unconstrained fn __add_linear_expression<let M: u32>(\n        self,\n        x: [BigNum<N, Params>; M],\n        flags: [bool; M]\n    ) -> ([Field; N]) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut sum: [Field; N] = [0; N];\n        // TODO: ugly! Will fail if input array is empty\n        let modulus2: [Field;N] = self.double_modulus;\n        for i in 0..M {\n            if (flags[i]) {\n                for j in 0..N {\n                    sum[j] = sum[j] + modulus2[j] - x[i].limbs[j];\n                    assert(x[i].limbs[j].lt(modulus2[j]));\n                }\n            } else {\n                for j in 0..N {\n                    sum[j] = sum[j] + x[i].limbs[j];\n                }\n            }\n        }\n        // problem if we normalize when used in computing quotient\n        sum\n        //   let result_p: ArrayX<Field, N, 1> = BigNum::__normalize_limbs(ArrayX::from_array(lhs_sum_p), N);\n        //  let result_n: ArrayX<Field, N, 1> = BigNum::__normalize_limbs(ArrayX::from_array(lhs_sum_n), N);\n        //  (result_p.segments[0], result_n.segments[0])\n    }\n\n    /**\n     * @brief computes the limb products of a quadratic expression\n     * @details see __compute_quadratic_expression_with_borrow_flags for full description\n     **/\n    unconstrained fn __compute_quadratic_expression_product<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> ArrayX<Field, N, 2> {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut add: [Field; N] = [0; N];\n\n        for i in 0..NUM_PRODUCTS {\n            lhs[i] = self.__add_linear_expression(lhs_terms[i], lhs_flags[i]);\n            rhs[i]= self.__add_linear_expression(rhs_terms[i], rhs_flags[i]);\n        }\n\n        let add: [Field; N] = self.__add_linear_expression(linear_terms, linear_flags);\n\n        let mut mulout: ArrayX<Field, N,2> = ArrayX::new();\n\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    mulout.add_assign(i + j, (lhs[k][i] * rhs[k][j]));\n                }\n            }\n            mulout.add_assign(i, add[i]);\n        }\n        mulout\n    }\n\n    /**\n     * @brief computes the quotient/remainder of a quadratic expression\n     * @details see __compute_quadratic_expression_with_borrow_flags for full description\n     **/\n    unconstrained fn __compute_quadratic_expression_impl<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mulout = self.__compute_quadratic_expression_product(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        let relation_result: ArrayX<Field, N, 2> = mulout.__normalize_limbs(N + N);\n\n        // TODO: ugly! Will fail if input slice is empty\n        let k  = Params::modulus_bits();\n\n        let (quotient, remainder) = __barrett_reduction(\n            relation_result,\n            self.redc_param,\n            k,\n            self.modulus,\n            self.modulus_u60_x4\n        );\n\n        let mut q = BigNum::from_array(quotient);\n        let mut r = BigNum::from_array(remainder);\n        (q, r)\n    }\n\n    /**\n     * @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n     * @description The expression is of the form:\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n     * For example, when computing the product a * b - q * p = 0, it is possible that:\n     *      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n     *      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n     * In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n     * In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n     *\n     * @param lhs_terms a 2D array of BigNum\n     * @param lhs_flags a 2D array of sign flags\n     * @param rhs_terms a 2D array of BigNum\n     * @param rhs_flags a 2D array of sign flags\n     * @param linear_terms an array of BigNum\n     * @param linear_flags an array of sign flags\n     **/\n    unconstrained fn __compute_quadratic_expression_with_borrow_flags<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>, ArrayX<Field, N, 2>) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n\n        let mut mulout_p = self.__compute_quadratic_expression_product(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        let mut mulout_n: ArrayX<Field, N,2> = ArrayX::new();\n\n        let relation_result: ArrayX<Field, N, 2> = mulout_p.__normalize_limbs(N + N);\n        let modulus: [Field; N] = self.modulus;\n        let (quotient, remainder) = __barrett_reduction(\n            relation_result,\n            self.redc_param,\n            Params::modulus_bits(),\n            modulus,\n            self.modulus_u60_x4\n        );\n        assert(remainder == [0; N]);\n\n        for i in 0..N {\n            for j in 0..N {\n                mulout_n.add_assign(i + j, quotient[i] * modulus[j]);\n            }\n        }\n\n        // compute borrow flags from mulout_p and mulout_n\n        let mut borrow_flags: ArrayX<Field, N, 2> = ArrayX::new();\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        let downshift: Field = 1 / two_pow_120;\n\n        // determine whether we need to borrow from more significant limbs.\n        // initial limb is \"simple\" comparison operation\n        // TODO: check how expensive `lt` operator is w.r.t. witness generation\n        borrow_flags.set(0, mulout_p.get(0).lt(mulout_n.get(0)) as Field);\n        // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n        // and there is nothing to borrow against for the final limb.\n        let mut hi_bits = (mulout_p.get(0) - mulout_n.get(0) + (borrow_flags.get(0) * borrow_shift)) * downshift;\n        for i in 1..(N + N - 2) {\n            // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n            // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n            //     * downshift;\n            mulout_p.add_assign(i, hi_bits);\n\n            // determine whether negative limb values are greater than positive limb values\n            let underflow: Field = mulout_p.get(i).lt(mulout_n.get(i) + (borrow_flags.get(i - 1) * borrow_carry)) as Field;\n            borrow_flags.set(i, underflow);\n\n            hi_bits = (mulout_p.get(i) - mulout_n.get(i) + (borrow_flags.get(i) * borrow_shift)\n                - (borrow_flags.get(i - 1) * borrow_carry)) * downshift;\n        }\n\n        let mut q = BigNum::from_array(quotient);\n        let mut r = BigNum::from_array(remainder);\n        (q, r, borrow_flags)\n    }\n\n    unconstrained fn __udiv_mod_impl(_: Self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> (BigNum<N, Params>, BigNum<N, Params>) {\n\n\n        let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n        let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator.limbs);\n       \n        let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor.limbs);\n        let b = divisor_u60;\n\n        let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n        let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n        divisor_u60 = divisor_u60.shl(bit_difference);\n        accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n        if (divisor_u60.gte(remainder_u60 + U60Repr::one()))\n        {\n            divisor_u60 .shr1();\n            accumulator_u60.shr1();\n        }\n        for _ in 0..(N * 120) {\n            if (remainder_u60.gte(b) == false)\n            {\n                break;\n            }\n\n            // we've shunted 'divisor' up to have the same bit length as our remainder.\n            // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n            if (remainder_u60.gte(divisor_u60)) {\n                remainder_u60 -= divisor_u60;\n                // we can use OR here instead of +, as\n                // accumulator is always a nice power of two\n                quotient_u60 = quotient_u60 + accumulator_u60;\n            }\n            divisor_u60.shr1();// >>= 1;\n            accumulator_u60.shr1();//  >>= 1;\n        }\n\n        (BigNum::from_array(U60Repr::into(quotient_u60)), BigNum::from_array(U60Repr::into(remainder_u60)))\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n\nunconstrained fn __barrett_reduction<let N: u32>(\n    x: ArrayX<Field, N, 2>,\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>\n) -> ([Field; N], [Field; N]) {\n    let mut mulout: ArrayX<Field, N, 3>  = ArrayX { segments: [[0; N]; 3] };\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout.add_assign(i + j, x.get(i) * redc_param[j]);\n        }\n    }\n    mulout = mulout.__normalize_limbs(3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n    let mut quotient_u60 = mulout_u60.shr((k + k));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient: ArrayX<Field, N, 2> = quotient_u60.into_arrayX();\n\n    // quotient_mul_modulus can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus: ArrayX<Field, N, 2>  = ArrayX { segments: [[0; N]; 2] };\n    let mut quotient_mul_modulus_normalized: ArrayX<Field, N, 2>  = ArrayX { segments: [[0; N]; 2] };\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus.add_assign(i + j, partial_quotient.get(i) * modulus[j]);\n        }\n    }\n\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus.get(i));\n        quotient_mul_modulus_normalized.set(i, lo);\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus.add_assign(i + 1, hi);\n        }\n    }\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n\n    let x_u60 : U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    } else {}\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n","path":"/home/hdvanegasm/Documents/hashcloak/aztec/noir-bignum/src/runtime_bignum.nr"},"94":{"source":"use dep::bignum::BigNum;\nuse dep::bignum::runtime_bignum::BigNumInstance;\nuse dep::bignum::runtime_bignum::BigNumTrait;\nuse dep::bignum::runtime_bignum::BigNumInstanceTrait;\nuse dep::bignum::runtime_bignum::BigNumParamsTrait;\nuse dep::bignum::utils::u60_representation::U60Repr;\nuse dep::bignum::utils::arrayX::ArrayX;\nuse dep::bignum::fields::Params2048;\nuse dep::bignum::fields::Params1024;\n\nstruct RSA<BN, BNInstance, let NumBytes: u32>{}\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] = [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i as u32 < 52 + ps_len as u32 {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i as u32 == 52 + ps_len as u32 {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i as u32 == 53 + ps_len as u32 {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\nimpl<BN, BNInstance, let NumBytes: u32> RSA<BN, BNInstance, NumBytes>  where BN: BigNumTrait, BNInstance: BigNumInstanceTrait<BN> {\n    /**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @details The fourth function parameter is required to define the value of `NBytes`\n *          when converting a BigNum into a byte array, the number of bytes is required and currently cannot be inferred.\n *          Once numeric generics can be derived by applying operations to other numeric generics the need for this will go away.\n *\n * @note We assume the public key exponent `e` is 65537 \n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\n    pub fn verify_sha256_pkcs1v15(_: Self, instance: BNInstance, msg_hash: [u8; 32], sig: BN) -> bool {\n        // e = 65537 = 1 0000 0000 0000 0001\n        let mut exponentiated = instance.mul(sig, sig);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, exponentiated);\n        exponentiated = instance.mul(exponentiated, sig);\n\n        let mut padded_sha256_hash_bytes: [u8; NumBytes] = exponentiated.to_le_bytes();\n        compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n    }\n}\n\ntype BN1024 = BigNum<9, Params1024>;\ntype BN2048 = BigNum<18, Params2048>;\ntype BNInst1024 = BigNumInstance<9, Params1024>;\ntype BNInst2048 = BigNumInstance<18, Params2048>;\n\ntype RSA1024 = RSA<BN1024, BNInst1024, 128>;\ntype RSA2048 = RSA<BN2048, BNInst2048, 256>;\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let BNInstance: BNInst1024 = BigNumInstance::new(\n        [\n        0xe908724e0d28a1565511879e00f063, 0x58dea28d5112982c8ab8597d3e611f, 0xb115f9878acc910a47b41ac8d5f763, 0xc71b0a719c2283f710f86024737cee, 0x9ee9eb73e95b84f033af5217337427, 0x8fcab34c99cc2661dd57de15ae2110, 0xa38db8a829eec5550342f6f66334dc, 0xd7c4b32fd351a47d860fda1897330e, 0x98c92a33a0f33fd7\n    ],\n        [\n        0x55582e8ba08822783fbd7d07390be2, 0x1d7d83f9dce3983c66f440dcc2f33e, 0x6072d13c84a4cb304f58fbabe782e7, 0x0cee5e0dd62bc54d15a91a4ea3bc50, 0xc485e6f946c45cf660fba4f49325cb, 0x1f0e45df0464b065c94e84ed1dad8c, 0xe4c7b3976310ea239059d834b545f3, 0xd418145200fa77235f5f8d852b121f, 0x01acf0bd16cad9bd8f\n    ]\n    );\n    let signature: BN1024 = BigNum::from_array(\n        [\n        0x393f230b55a12fb7bb39c7edd2cf48, 0x78f7d0a217d340407cae4f39b8f001, 0x603909ff76a519f3c8e96d695d462e, 0x0640ab230b459bf4b20b4823a5b850, 0x02ba190de61a85074b18e228231984, 0xe1424c0779825707aa433ecb86c388, 0xbed8087d947a9c6c56625ad20c91aa, 0x7da4a0c2eee3a3c0d61e892ab4ada9, 0x6ef98a936c8bf8e5\n    ]\n    );\n\n    let rsa: RSA1024 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    let BNInstance: BNInst2048 = BigNumInstance::new(\n        [\n        0x183b4cadacea64716b6535b25a86ad, 0x129a32e9fbd374949e81b080546c2b, 0x9276332765f54b9b4d6fe23f4983a4, 0x91df05fde1a414c9fbf38808a01032, 0x97ca171c382e082ddd6c81be090902, 0x97161dde47ed979939451704b72648, 0x3b66f0c93f8ddbc62bb99f6b8fad2d, 0xc3a046fcad814d8938da372cd84d2a, 0xfe903cfe3ee4de6de3916023bb87f2, 0x8be5fd99c8b46dce9aab27ce4b3883, 0x0d99dfe50dd2288123804872da8543, 0xbb6d8afef8b2c7e3b86ad96973d4e5, 0x17e08fa3c5391279b844581f67825c, 0x09511f4a436abe495bfbfcc254d9c5, 0xf80d02572d620eab5ad7ecfbe2c20c, 0x2a5307402a05f59ba232ad0c8366d0, 0x7b9169630b317c38d549a86f85fcfc, 0xf2\n    ],\n        [\n        0xf4effa025abe90db41dc5bb5934a5f, 0x2596b25aa09f6a0e290accebbef006, 0x330e9567ec5eca92b7a8ce72ad3d83, 0xccf98d178ec4017e4947cadc02da7c, 0xaed6044ffeeb12de4d1e67aedfda78, 0xb5ae8a5a4637b632800e2f41dfbf0a, 0x8304360d359cf2f0d5d97c039f9b04, 0x53cde0d0633c0e66e1da9a118f6a96, 0xf9a83822351097bb1ed123d10290f5, 0xeb489c7f7227c09ca0117264dcf04f, 0x6a1b3618478a235f438adf84533177, 0x71c03085e38a87f5ec8e51c27dde98, 0xcf3e89d9cf253ef61d65d4431334d9, 0xa5a1a59e98fb7f49c746149324201d, 0x38f46c635f884f24c254eaa37981d6, 0x1c42be15dd95e1ac5bf01972b24ff9, 0x4555dd506d1f89e61279293c03db90, 0x010e\n    ]\n    );\n    let signature: BN2048 = BigNum::from_array(\n        [\n        0x5f0937ed1aacbdb83991e21c89ca8a, 0x5a1fa4ef2faf4042401c9121c73874, 0x7379fbb7713fbf807d250f7401afb8, 0x9cc5ce8813f3a83a72b681a4d434b2, 0x11cb49ac2ee1f9bed8a008b8327e1e, 0xf3362524f1224e48827b34a62f6ace, 0x3498a2944e32a3798fe9da684b32ae, 0xc346c33528bcdf7a06805126a29402, 0x6ac93f2fa68f270ec73674eae24380, 0x222c72de080496533ceeb8af827910, 0xc22889b311a53203278b942ca67100, 0x93d75567f7fe9ee7ca9871a0cb09f9, 0x049dabd976a9574847b1614f6b739c, 0xdc66b621dbae623df9b657b52fa1b0, 0xf37e82cc1eced382e11fc32e673f67, 0xe50545eb9027f1144a0ba7bbb0c886, 0xb6193409539c515d3c55a45c5734b1, 0x4b\n    ]\n    );\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));\n}\n","path":"/home/hdvanegasm/Documents/hashcloak/aztec/noir_rsa/src/lib.nr"}},"names":["main"]}