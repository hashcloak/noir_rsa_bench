use dep::bignum::BigNum;
use dep::bignum::runtime_bignum::BigNumInstance;
use dep::bignum::fields::Params2048;
use dep::bignum::fields::Params1024;
use dep::rsa::RSA;

type BN1024 = BigNum<9, Params1024>;
type BN2048 = BigNum<18, Params2048>;
type BNInst1024 = BigNumInstance<9, Params1024>;
type BNInst2048 = BigNumInstance<18, Params2048>;

type RSA1024 = RSA<BN1024, BNInst1024, 128>;
type RSA2048 = RSA<BN2048, BNInst2048, 256>;

fn verify_sha256_pkcs1v15_1024() {
    // ==============

    let sha256_hash: [u8; 32] = dep::std::hash::sha256("hello world".as_bytes());
    let signature: BigNum<9, Params1024> = BigNum::from_array(
        [
        0x5c09e4b58b9688c60bb5421db601f6, 0x8623962f67799f880719c09c88b863, 0x8fbaa12667e7742118e3489238c98d, 0xd8d082abab4e4f01d244a484db7347, 0x55b943d13a669d5612cd6a9f041606, 0x65f29ddb3d601b9a613079684d56c5, 0x011c3fca11b02e04f16ba08d9a4f9d, 0x0d32b9e0c13468dcc4373638129de7, 0x3fee7e51641d12ae
    ]
    );
    let BNInstance: BNInst1024 = BigNumInstance::new(
        [
        0x93c9ab93e6467e63aa09f2b08b91d3, 0x3616f23b55657ca90eefc1ee6e19bd, 0xf9fce24d27d3dee285323d62e50ca2, 0xa8b0e7794de4626f82d9a63821c445, 0xcd2cfed7966e6cd7ab2c9774a40439, 0xa9d79df4bab1ef6706a2e584ad1072, 0xb203ae0fb0b59e35666d9bd31a6e96, 0xcdab0509e57d280608f5dabbc7a03a, 0xa50e88bf77afb5fb
    ],
        [
        0x08fc4032ed6475b3b299a21b3f337f, 0x59190500a5aa716e64461b486b702b, 0x42d43b5c11e8f43df6903f39b6d435, 0x26aca1f829deeb2051a8777fd794db, 0x498204187a60b6b1bd95d85bf3480d, 0x68f1d1bf54940d4ef59027e9a10266, 0x9589f1952f290c8696889a77103ad8, 0x65778917dab3e13483247ef55f9f14, 0x018d0d1f52c73b2a7a
    ]
    );
    let rsa: RSA1024 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));

    // ===============

    let signature: BigNum<9, Params1024> = BigNum::from_array(
        [
        0xdf2d442ceb9f2c0300b08075a497cd, 0x35f67fa33fefbba3a563153149cbc1, 0x097088d3fe833ef6996be138160cab, 0x1902b8a0815eb910365f5d3fca48cb, 0xd1a33a54d8d3aeb3cb05018ea36354, 0x0d47333f1bd07b0e6165fb9be800a3, 0xe217ca26e1870815e025ab8075d58a, 0x96ece814aab7a32dc4f1593a8344c6, 0x1771e948a3d14992
    ]
    );
    let BNInstance: BNInst1024 = BigNumInstance::new(
        [
        0xcc3890e37a1dd3f1e023398af9ef49, 0xf2ebff097e1909fbdd445eb1f45af1, 0x4cb2fc906eef3dd53c264f10e3fd62, 0xfbfc481bafc3a9b7c1d6c464cc9f99, 0x9da69d4a4eee6daf7a48d84d430c34, 0xa723ac36c1b196ecb946685fafc831, 0x545884256a986efbc7b0db332ace5c, 0x5268102709f68857f89db5482247b7, 0xc6712bb0fb3c9f87
    ],
        [
        0x269bf92f95ac6a6cb6d59c30a16b20, 0xa09f7d36a9bcc344bac532e8d21177, 0x93f745ddb02c4476dc88e8e3eccc5d, 0x15564aef7a6f28ede20650f07d5d61, 0xcde52cd3590da954bba871a32dae5e, 0x52eaa3428d550a1e5ffdc11f2afd49, 0x2d4d172acf99fae4bcc0541e57b11d, 0x6dd7b633645325cb3b2ccd69a64cfe, 0x014a40a6ea3655c127
    ]
    );
    let rsa: RSA1024 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));
    // ===============

    let signature: BigNum<9, Params1024> = BigNum::from_array(
        [
        0x58f4d0f25c115ea75c7f109e894ca4, 0xee1d976fadec1e4969df46723638ac, 0xe7409c6585f9f55c6658f144bc1e0f, 0xd600cad18f465a173b2b14ddfa9c0e, 0x1b3fa6dd3046d0fd3bae79e3110441, 0xfd04fb9e913e587ca8b127311fac0f, 0x04240b5bd42c83e382e47525d2a307, 0x84d75ee4d2f779e8761c4607804c3b, 0x8ab5aa10b0be7532
    ]
    );
    let BNInstance: BNInst1024 = BigNumInstance::new(
        [
        0x6607007d490c3aaae0e25a78e5ec61, 0x5dde2af644417c76f408b07f73d8ca, 0x3f2e84dbe289d3392fcb14c5897c50, 0x781ba5866fc01c16b84e0d6f5de10d, 0x7a0c050b9fca16f3d750dd550b1a8c, 0x6034e0dea91810832f2af98f8018bc, 0x96fe1289ec9d4736dde742ac202781, 0xe1608d03ecf5119c508085b2b406ab, 0xbcb6244e2221f38f
    ],
        [
        0x0c7b2ffcfdc358af433024bc95bb60, 0x19f245c26f91e6ca29575237a48b4d, 0x91fe33bc03655cf74ce564ffeddc37, 0x428a6a3aa5538bdb1bfbec3e46f6b2, 0x9b3c9de7bd7e520ee869ca1dbff2b0, 0x2fc8a80742eae29df4a5950bc5c8a7, 0xb8cc0cf65701aa3dbf8d1ed45e1369, 0xf2fbf8945851f8ee454d7ef7d85462, 0x015b480cf8b7f60168
    ]
    );
    let rsa: RSA1024 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));
    // ===============

    let signature: BigNum<9, Params1024> = BigNum::from_array(
        [
        0xefeb5a3bcac8cd7084e41368fa7d0e, 0xdd3ac5a997e417cfbd16bd02df3219, 0x25df010f6bb3d4ec2bcec1c20bb164, 0x614c522a1f09d9c0c120e267b92e90, 0x980bd09aab9ce6875901ec77a63b54, 0x244ea8abb3e622a1b45fbb5a6663af, 0xec47471b45bd37b3b372b8f8b6fc7c, 0x14019ea68742fc061601744b7966ad, 0x1fd0480faf336377
    ]
    );
    let BNInstance: BNInst1024 = BigNumInstance::new(
        [
        0x1247fb54cd3851d1df7eb00219e007, 0x31da55c3255cbbbafda13e1bce763e, 0x611376f4aecce99ef829a7a607ca7c, 0x9429dc8e7cac59198af4259af1e5a3, 0x626bc774fdcaa28c88779ddc873e62, 0x96a095ae72988e8210ab5f4bea593d, 0x3acf10c4e6605fd9fc18cf840b9b71, 0xe91a0dd39fa11cbd9af8d542fbae02, 0xb47cd267c27be06f
    ],
        [
        0xdc36d96b13ecad8182cf73b079eedd, 0x7c398c22507bed2df35c99b5b366cd, 0x302d86e191f7bc936b7159931a446a, 0x166b1959b82b6ae420c6638478db34, 0x892676b8e48e6bd5068923a552e304, 0x93a6aa69fde69017bc9831aac60943, 0x1099ca912346d59c2642ac94ce8b68, 0x571e113d520928f428d3f202ebbdb9, 0x016b1af5580097b80a
    ]
    );
    let rsa: RSA1024 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));
    // ==============

    let signature: BigNum<9, Params1024> = BigNum::from_array(
        [
        0x89e7a445214fe3696e2c26636db2f6, 0x50eca97ad394cf01b14e772c6834ad, 0x672d83c3604df5ddf91cf4745b0eeb, 0xbc892bb8d6e89d3b5912165d3a024d, 0x92a886f3f34fe95af0f309d30ee476, 0xc204e201a541efb94be5be502af192, 0x349071abfc0237703ec68d92c53c68, 0xc893adc00d572216d724306c08ae59, 0x58def49334f2b743
    ]
    );
    let BNInstance: BNInst1024 = BigNumInstance::new(
        [
        0x84d749143357b7a822f59c67772d8f, 0xfed74cc15492581b7be03621437643, 0x8ebae37ff27ef9e019641b97966d9d, 0x4b9e6b633bad19d289b0a3f66b934c, 0xc2ef40bf0f2bcbf8bee2d158133367, 0xda5a4766f70fdd1ec741f4de2fdf2b, 0xe26758b47364ad591ff30d7965fe20, 0xa30fb355e1a22c6a02dfe76cd149fd, 0xaf622b902b792465
    ],
        [
        0x3e2cc781bec082bbb9b5a0226be5ae, 0x1cffe3eecdc16daae0d32003563d4d, 0xed6722a60d898bf007eab739c3e8fc, 0x5570ec16d9d7d644b82a5d5adc6294, 0xe1528e067bae63083a5d1fbc6c00fa, 0x60a5f015b4e5ccfdf1e5fcea431fce, 0x737cd391394ec026f3fde9a934af64, 0x3b44ba2bca20deb4a26075366b95e9, 0x0175ac2f8a273aef62
    ]
    );
    let rsa: RSA1024 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));
    // ==============

    let signature: BigNum<9, Params1024> = BigNum::from_array(
        [
        0x37f1572b9716f2caf26ab1decfe243, 0x5e39bb0eb06c14bd4aa32685acccb0, 0xa8f6ae421d414388fd4c0ef0bdc518, 0x314df61fe1f4140f9d865fb3961157, 0xd33e8751ddba848b17f49d3438dfa8, 0x9dc9531d4060f3ca6a3b7aade12dac, 0x5a599bfaee30f6732389e30a19fe24, 0x511444536071067c44679a3044faba, 0x21053bfb1bc627f8
    ]
    );
    let BNInstance: BNInst1024 = BigNumInstance::new(
        [
        0xd0e7c1315dc41526f0103618981f71, 0x0376cb7b261945b68a9d77bc743b01, 0xb90a2cab67096242125feae37cfbb4, 0x61f2add76779e5defbfb9fd4f67e61, 0xbde96c047fdb310ecf69ad1b174e44, 0xc340c471a2b422cf44814c56517ab0, 0x5118a7159339add78f229d5d08714e, 0xb05bfa42ea332d24d301d35ea152e5, 0xd2b2307796bcc3c2
    ],
        [
        0x1efaa03ca598c8e61936943932b177, 0x0cb4596aa942111575d85fcc997c74, 0xac4efbfe3c71ae9ff7a27401b55b4a, 0x5d99fd1b25bd717a345b5ebc3ee85d, 0xdab93f00d582f8ee265a2292990b7e, 0x7cbcad0abca2a1a3f21cb722aab69d, 0xcd06e157b8024b19758f43b5331296, 0x8b057ad780ea69f5130777076c0401, 0x01370b93949dd27b4d
    ]
    );
    let rsa: RSA1024 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));
    // ==============

    let signature: BigNum<9, Params1024> = BigNum::from_array(
        [
        0xe84570248de76a931360a2b055d65c, 0x885eaebd46851799868250b60ae39f, 0xe1c4941df933366828e3ecafb0499e, 0x0b68899a4435c8d738a970c206bfa3, 0x7e01c50867910e9e93f90a161ebeee, 0xbbabc8db4fd00f5b60a49e1202fd19, 0x43f913ab160cc15a9ada1c00b673a3, 0xfbf63c1979660d9eaa49f22848dd8e, 0x3c9916fbf4e1a266
    ]
    );
    let BNInstance: BNInst1024 = BigNumInstance::new(
        [
        0x323f9ac9ab6cca75678023cc3bae41, 0x2c85731077eeffc48ebdb7b3013d6f, 0xebabfdf4e33c78df01db88064aee66, 0x93f8f1ac44b85f9fd8cb257d88d7ce, 0xfb2ef301e894f8613187c314020c90, 0x424e339bf934a7db0737e7f07afa8d, 0x171b4d2c5b7d4b1584d6296b8cb8ba, 0x6d8a560ff5b211853515fadc8990a8, 0xb20a1c2dd49c8a39
    ],
        [
        0x40c4fadb6921a2887208f697930b8e, 0xf6ef6fa650f7e2a065580d338b86c1, 0x645c8fec443c96bffb0bdf55c273cf, 0x883aeea9aee7c558e62a9e517f17b2, 0xd95ffee7c24381a0449b8f80f094c9, 0x9395a3656a270e31b605bdeeb6f3c0, 0x69a30258b69eb7fd370f4cb1d85794, 0xbe870be607406c8431c03b7a115482, 0x0170191d7bf9f83ed8
    ]
    );
    let rsa: RSA1024 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));
    // ==============

    let signature: BigNum<9, Params1024> = BigNum::from_array(
        [
        0x2271e1585fd1c37cfe8414ec5b64bf, 0x1ecf2f2c503b71d70163c95fcb82aa, 0x0a1fc27113da91e4992f57f7be5ae9, 0x5fee3b47d0df409b9ecb502bfdd4a1, 0x3b9b7b069873b2c4a8b23cb42323c0, 0xbac7e13a8feb943c11f06f98cd7ded, 0x06cad85e92f35ae4adc6fc37183397, 0x3cf561b8992f7b0a8a9494e6c78276, 0x7fac3dd7dfb79377
    ]
    );
    let BNInstance: BNInst1024 = BigNumInstance::new(
        [
        0x8d5bb418e2da33227d617f4f44e2cd, 0x7d5a5b9b2ac49620a4271c985d323f, 0xac159ddfc1458803d03c172f8d714d, 0xe539c6d8f13b2c712f811ed9d862c1, 0x1c92201f4efc7469033b817ccee871, 0xd259cb65a2b1cbfe7f7d79c2ac86, 0x07811f794165e48c299568ee7d2f66, 0x77f32e8ad5963d2c7fa83fa0877b93, 0xcc3fef72550663be
    ],
        [
        0x3f42b17f0284987c0a890d2b996233, 0xfb648a08bb0f2bfa67c54d4c160327, 0xaab6ca8418cd19b87bdf9cacf49ea2, 0x70f8c809f9be805c8f68a6da12c6ae, 0x832d8d4018f1c177233ae0b17a0335, 0xbd204844edca4d42b39638c63eb993, 0x571b1887815e4a48603df51f75f784, 0x8a75c5751457b33378334c00095a88, 0x0140dcb1a9561c016b
    ]
    );
    let rsa: RSA1024 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));
    // =============

    let signature: BigNum<9, Params1024> = BigNum::from_array(
        [
        0x27f34b228ee2b89b12f0a44bbdc966, 0x498729b2e48699d0101f2af405ed6a, 0x46b19b2338e8dae7dd09e1dfaac48d, 0x4b3b36fa44ed7ee3f2bf2a926568bd, 0xda2128f2d69153fdd14af9934a287d, 0x7c44985cd7f9cf1fea60ee3a64d123, 0xea8682c9a3b09cff69f09877e1e9e3, 0xa01b67e682713f0180c57c48c61d66, 0x06c2c9f2a8e53a75
    ]
    );
    let BNInstance: BNInst1024 = BigNumInstance::new(
        [
        0x257ffc696abc7f297f4152bade9e61, 0x54bd6b7ce45a41c3a3c4b5b063b9ee, 0x48b8618c3a977fb231abdeaf07bf15, 0xd85b49ff76aefebfd8e6af81a49526, 0xeac8dbc68026f49243b77c9a219eaa, 0x521bf52a0d5b7733a9b4902784c1b0, 0x697b96dd77c1a9e1e0890fd9258d15, 0xc683b70a28a2387b93632d72292b4e, 0xc321d0bb0274580d
    ],
        [
        0x455e74d1379bbf54b5f131843155d4, 0x50705fef4366813b692a8ac4658aa1, 0x433bbddf26c2c04feeb13a66fdaf1a, 0x1f593f81fa7dab75e7c7aa91e1531d, 0xb83a551207f60531fb35fe3ed73c17, 0xb6e11521b04acbc5f49afafcf085b3, 0xaeadd103ce07dfd3748a7fe6ea37e6, 0x936af9bf110e89547dca0d8f30e3b8, 0x014fdac38eb4c4572b
    ]
    );
    let rsa: RSA1024 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));
    // ==============

    let signature: BigNum<9, Params1024> = BigNum::from_array(
        [
        0x5cfe3fdd97fa7fd2ee080f5ef757d8, 0x080d2b3f87b143b08bc9ab8c923dd2, 0xc5aabc137b4acd1de34e554dfce25a, 0x04f1afba5c044c3734f930e40a3d7c, 0xa1a6b6e9db20c4f61f34a99151e562, 0x67cce26dafd0411294d243bf53a74a, 0xe8af8143ffc8f0d3631c85207ff622, 0x71769ca9f8c3d59d3b3ee0787c33a1, 0x9e44b6623b52ecbb
    ]
    );
    let BNInstance: BNInst1024 = BigNumInstance::new(
        [
        0x82d190a97590aad8e3a3825fe4af11, 0xb30523c0fe4ec976adab754d0a13fc, 0xc0cb1557cefa1831fe0c6c355c31cd, 0x9c9939c9a63240dc96b26406cd8ce4, 0xa7c55bdbb10579f2a8bbd2803f6f4e, 0x7e15a6782d5045d437c4cc00f8b2ff, 0xc4f768c3fc79664777a8e430e0f95c, 0x1205f9d375bda4ebd17d154cc50520, 0xa2ded450c8e42b98
    ],
        [
        0xcae29bc38c707636cb97d7fd23062d, 0x6d3a2e991bcc419af20a3f9aa27fbf, 0xca81b1b758273f975420e99d606848, 0xe496829949d0fdb2412097c18eeb66, 0x46288f83ff549eab6b7cdcd3d97987, 0x0767ddbed74ef628bf34e57f8c5e5e, 0xa1196cb5cadd3f88311f3c4248c52b, 0x2854f6362f66164e78171ca5e761e4, 0x0192619727b45c9858
    ]
    );
    let rsa: RSA1024 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));
}

fn verify_sha256_pkcs1v15_2048() {
    // ====================

    let sha256_hash: [u8; 32] = dep::std::hash::sha256("hello world".as_bytes());

    let BNInstance: BNInst2048 = BigNumInstance::new(
        [
        0x183b4cadacea64716b6535b25a86ad, 0x129a32e9fbd374949e81b080546c2b, 0x9276332765f54b9b4d6fe23f4983a4, 0x91df05fde1a414c9fbf38808a01032, 0x97ca171c382e082ddd6c81be090902, 0x97161dde47ed979939451704b72648, 0x3b66f0c93f8ddbc62bb99f6b8fad2d, 0xc3a046fcad814d8938da372cd84d2a, 0xfe903cfe3ee4de6de3916023bb87f2, 0x8be5fd99c8b46dce9aab27ce4b3883, 0x0d99dfe50dd2288123804872da8543, 0xbb6d8afef8b2c7e3b86ad96973d4e5, 0x17e08fa3c5391279b844581f67825c, 0x09511f4a436abe495bfbfcc254d9c5, 0xf80d02572d620eab5ad7ecfbe2c20c, 0x2a5307402a05f59ba232ad0c8366d0, 0x7b9169630b317c38d549a86f85fcfc, 0xf2
    ],
        [
        0xf4effa025abe90db41dc5bb5934a5f, 0x2596b25aa09f6a0e290accebbef006, 0x330e9567ec5eca92b7a8ce72ad3d83, 0xccf98d178ec4017e4947cadc02da7c, 0xaed6044ffeeb12de4d1e67aedfda78, 0xb5ae8a5a4637b632800e2f41dfbf0a, 0x8304360d359cf2f0d5d97c039f9b04, 0x53cde0d0633c0e66e1da9a118f6a96, 0xf9a83822351097bb1ed123d10290f5, 0xeb489c7f7227c09ca0117264dcf04f, 0x6a1b3618478a235f438adf84533177, 0x71c03085e38a87f5ec8e51c27dde98, 0xcf3e89d9cf253ef61d65d4431334d9, 0xa5a1a59e98fb7f49c746149324201d, 0x38f46c635f884f24c254eaa37981d6, 0x1c42be15dd95e1ac5bf01972b24ff9, 0x4555dd506d1f89e61279293c03db90, 0x010e
    ]
    );
    let signature: BN2048 = BigNum::from_array(
        [
        0x5f0937ed1aacbdb83991e21c89ca8a, 0x5a1fa4ef2faf4042401c9121c73874, 0x7379fbb7713fbf807d250f7401afb8, 0x9cc5ce8813f3a83a72b681a4d434b2, 0x11cb49ac2ee1f9bed8a008b8327e1e, 0xf3362524f1224e48827b34a62f6ace, 0x3498a2944e32a3798fe9da684b32ae, 0xc346c33528bcdf7a06805126a29402, 0x6ac93f2fa68f270ec73674eae24380, 0x222c72de080496533ceeb8af827910, 0xc22889b311a53203278b942ca67100, 0x93d75567f7fe9ee7ca9871a0cb09f9, 0x049dabd976a9574847b1614f6b739c, 0xdc66b621dbae623df9b657b52fa1b0, 0xf37e82cc1eced382e11fc32e673f67, 0xe50545eb9027f1144a0ba7bbb0c886, 0xb6193409539c515d3c55a45c5734b1, 0x4b
    ]
    );
    let rsa: RSA2048 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));

    // ====================

    let signature: BigNum<18, Params2048> = BigNum::from_array(
        [
        0xa5e4d5c4794b6c31529ff97cd4f605, 0xe34d5e284b3f119c599ab66fea5065, 0xc9959552a5dba8a30d3876617ab556, 0x87c1b821fc47aab079da4948ae25e4, 0x41e21249e11407a40741df194cb784, 0x9de228ba665123c649eb5cd7d295c2, 0xb53194857443022f4415cbe381a1a2, 0x551df1c50a48f06f21ea9ac2f4605c, 0xcc683832c7c165d6e853c8a5684294, 0xd9bf38f12cf1a6d315e67f11a8eda0, 0x0f4f0f4c34a36f7492d9ef92af2e02, 0xdb97cc5328e13239cc3a3147a07b04, 0x6813814e893e5f17ef72216fa40c21, 0xc950b045bd2ab919cbd45f1851f1c7, 0xa7f10fe41e0dc94f637aa0e0068b26, 0x75c60ee7ac659f4615e32459ac9246, 0x15eaa20d1f960ad454e84733686d35, 0x5d
    ]
    );
    let BNInstance: BNInst2048 = BigNumInstance::new(
        [
        0xb0d20fcff78eaf2e34f057600366af, 0x223b7e5264b744787ccf630332c727, 0x6a09dac6995e64f7190224460c95, 0x5ccbfdbcfa6b38f8da2e5180dcecf6, 0x42081bd6648dcd94a7ad12634447d9, 0x590556f60b390b0231671e5a6e7dbd, 0x436b3579005951901788b02a489310, 0x9684252ad32b3c410b50a226fc8134, 0xc545cdb3a8ee945b1f3917bda9e982, 0xfb2cc641bebfe12854cb2c39f3f792, 0x4db0d091ff8e71ae77912881b32ef5, 0x388b2651c78d1c1d843cab37eb07eb, 0xdbefe1c90a4ffd11308e7cc0dbd967, 0x578b807acd19aea3669f97e651897e, 0x3cab3b95370da371855a4baca8f260, 0xcce844854e667138f8ad8e3e5bfaf4, 0xe6d61c1c95b1b57c7af791bec6aa98, 0xba
    ],
        [
        0x988953fe917eebb17a990e989fd912, 0xa2c91c931ecf76057fe3a3fde1e1d5, 0x06a6188a622da4ef8a5d156b956dd2, 0x5609a2ee0d729d8474b2f619bd35c7, 0x9593b07fafde3bc88443c80b4ba58a, 0xacd43e9961437300b8a9092499dcc0, 0x354cb8ec8600e47794fbdf52e3f38b, 0xfd52de5e6b13f6221b354380da0af3, 0x4b69422ed1635a3339267784c9f147, 0x7bf52684f9488539335e56aef03478, 0x8a54e4b23ed8638f06c3fc25e486bf, 0x24dfd38cf1487f27617642b710a30d, 0xbb192bc494dac18089350280309486, 0x600e000d28a03cea2f28ec3659286a, 0xfada42c21d96bf14fd859c84852c8d, 0x26742ee3d8ec804239d14723a0b754, 0xa4eac1ae2ff66cc5f853c564e9a15a, 0x015e
    ]
    );

    let rsa: RSA2048 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));

    // ====================

    let signature: BigNum<18, Params2048> = BigNum::from_array(
        [
        0x972049aa5b1015b57240e1435689a7, 0xeff145821a875f8711f39d0d5433f0, 0xa1f39f922bf927734d20514f7b0175, 0xaa31874633562a0e3f0326e2252667, 0xcdc37f3686635113da5998107d089c, 0xa6e95ae457fed343678c71cae1be79, 0x27efab5f9a7d5c132691230141c7d5, 0x8c4d78befe67cb9f5233ab35e101de, 0x71e4d15b0b223165a3074f9f157398, 0x70d2f9316c52220c1975f98157c994, 0x34042711011a18f80977acc128644b, 0xef7d2eb5e2da8b282f84d4fbc4cf79, 0x0786d67533640f63500cef54118746, 0xb1b326fa38e66bc4ef9d491a1a1e55, 0x38ffe7d68530e360451b5d5407a797, 0x58f84dd8750d9a876d3fd38bd468db, 0xa0323319abf65e9f632e7f6371ff01, 0xa0
    ]
    );
    let BNInstance: BNInst2048 = BigNumInstance::new(
        [
        0x12a05db2b38f80eac0963e2dd39165, 0x5d8ea30b59d8374a2202378d32058b, 0x34b4e5a9b1d0662e1fbc961e2ae7c4, 0xa5031da61d0f9244b0b8c08324e014, 0xb215df0e503803312544eaa651f1ea, 0x9126bdf7c927b20a8a9bca9e439f05, 0xbc7fbe72c85adf1c40e499160034e5, 0x28322724b223050521f60b65ff3dd5, 0xf2dd24d5505048a9ea17a26956c420, 0xa83e4265c875ec526d30e369707f7c, 0x1861e174200df7155629b2f833d1c2, 0xb4d4d9b9799d55b833a2b51fb1ab20, 0x48b5fe2d3b3ee1c1a4d665fefbcab6, 0xcd2f7bf291b46470205d2b792eba85, 0x4ed69c83b442b15475921130ad71d5, 0xc03b5a942d9fd92a6a82d8bc8ce734, 0x5e12846182ebe629172f6bde348696, 0xef
    ],
        [
        0xee67c23dd1a6faf655996b3374ddc2, 0xfb937fdd3475afb2db24761c137039, 0xa5dceab6ae55f6830882ff54c98eca, 0xdaef44ca0f8f98bfed838c3689f4cf, 0x4ce452393a586398f540242c092a3c, 0x0af4ab477ca621d712544cdbac62b7, 0xaa375b6662b4c3b345cd09f704ae4c, 0xf53b0ac720e9085512135ce6c82391, 0xd865cbf68800b575b496aff3959f29, 0x6e0dd016a8640143432c514335bac2, 0xa5a768efb68b611b73600f74581589, 0x9031e00ef2266c7f9869ce475a1f0d, 0xe7df260dabddedecbca7d5c8c16ae6, 0xe30c7aa7a423f15696cfb1b5ab9bf7, 0x3b31428791017d56012ff4bd4ccf81, 0x2e287401b917672e992ddf7179212f, 0xc9ca8d3c95daeaa882182656bb493e, 0x0111
    ]
    );

    let rsa: RSA2048 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));

    // ====================

    let signature: BigNum<18, Params2048> = BigNum::from_array(
        [
        0x7ad4acd3048763a837ecc720db12cc, 0xeb258919fb5d9098d0f9a5767aa784, 0xf1be797a3847ba4f23591db2c043ce, 0x3de2e14da8d54f43557165189cd0c3, 0x4d00ac930c12e82f68da25a21a9545, 0xf9cc265ccfda4525e17102f9c18a16, 0x1588041000c6356228f0518c81fc81, 0xa793afd368d6e5375fe804cec384d7, 0x7c4c894f78941f36c47cd3b014a189, 0xfdcee5893ba17d4fd8a22711acd397, 0x65a1032e0f25e6e37c14bcca8ba09b, 0x110df04f02af70198bd5b6ba6fbb79, 0x7ced9570f76cd375bccf6ccee21d86, 0x1031a7b2f0776856c60e9e31c881d7, 0x7bab0d519eb4227a1db80ff9bea47b, 0xd9b380ba52db5325622f4666230be7, 0xc8c24a1c16f82ffdb3a78ade42ace5, 0xc3
    ]
    );
    let BNInstance: BNInst2048 = BigNumInstance::new(
        [
        0xd0d87bc734acccdb406ee8eb0e5b4b, 0x87d7d3bb15537911305ed54c913cf8, 0x489f4dbe3f2373ce27f67707c9d450, 0xb497b6794b3b31a7cfdf424adeeb70, 0xfe37f09715b107a8c71a5ffa107937, 0xe335449b8ab1d02931b60cc1992ee0, 0x0d16732a7ad203bd60eece5874c139, 0x273a195adc72825c9bbc4234f1720c, 0x5bb9359a2c4fe718d88573b6d5a966, 0x983d03af8ffd70b6e70bd26e5a8d05, 0xcc76e07cc159ebe08dc5ddcb583dc8, 0x32ebfb4c53283019c311ed1ad8ddbf, 0x13f9ff26a6e1b5876db8ad834822b1, 0x09fde40c612d716a38bc66f2d032f2, 0x34d0dc42ef43955b343948b4ca2e70, 0x4495f4f5097c75614a9a36d2e6140f, 0x2eddb3a8eeed65d15087305b449adb, 0xc7
    ],
        [
        0xa612027cfce9cf2d1d5fe976a38c5d, 0xd4923202bac6224d49f247d099a4bd, 0xac857966fa88d5c2f4f8da1883517f, 0xcc0e4235713fb42e66b9285a0206d7, 0x4f531887e83fdae8b731dc8ffc826f, 0x532ca342ce6db0e9cabd7498adc06b, 0x6427f687ff5a7f33d39f963dc88d2b, 0xde76b6c8c2d4a2de95ea6e66399a77, 0x6a1e16cc7122bb6fd30fc7616fd92f, 0x9813bb86c77325576e83f01883804b, 0xc4e9f760deb3b25a1318c11ca40cac, 0xa56b3d67a4275a0aaed9d121232027, 0xf7dd2f1ec0b00ca762cccc9081dad1, 0xd1b0e5bf13a1df2fc6ee95c0b96aa6, 0x742065281815e0c65d697c89f74177, 0xb4c48331f84e0afe044b6048808db6, 0x0621641596db659d514d0eeed1658d, 0x0149
    ]
    );

    let rsa: RSA2048 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));

    // ====================

    let signature: BigNum<18, Params2048> = BigNum::from_array(
        [
        0x3cdc25591ad8ea05ffeeaa6f875d7f, 0x68b86b1094030be4cbfb197735de42, 0x5df68194ad947215dcdaf746181e37, 0x07807ca556e024cedf0ecba9a8d245, 0x21090b389967cc8a97e9e2803d3dca, 0xff3913f1ef0b309c48b522e8636039, 0x0b7b5b8446fd9f32e9514996a4bd72, 0x0c2091e769a7622312dc291b3a09fa, 0x5ed52d4104de3c6a01f9126a8809d4, 0xd339690d2990644d970f5fd18fbc06, 0x4aea4867d47b7f825f63712633182e, 0x3b441bcc5daff528eae1f1ddd86b0d, 0xdc277737762a596ffaf830e36a3fe6, 0x98ebac09ffe136200101d05500e4e5, 0xb10227c387b3406c11ca231b030a3c, 0x5132bdbd31a49bcb2d7975d5069d13, 0x52bb326116f9f0af9330e26bd8217a, 0x69
    ]
    );
    let BNInstance: BNInst2048 = BigNumInstance::new(
        [
        0x9d675fcb4681ab961efc949bae2693, 0x44f4ca93321be0b5514785c063ce41, 0xd17e202819783bcfe10b54b917db06, 0xcbd57443f78cefd2036eb6d95cd535, 0x7f9772762986ba480efbfd4e321e40, 0x884e0c47d72c012960bc32995ed8ed, 0x4c0a98bc8fabd303d07f1fc5546791, 0x778169103a6af33d17d7ae97940d9d, 0x87e68ce887dcb337c9d2138a90aaf5, 0x0e001b09d1afaa322bb2d3d6c4af34, 0x087b6bfea4549907f2e77ddb8bb897, 0x7403536f5d5d52ba7726c4092ec8c7, 0x9382388d75ff24a8173ba68b9d808a, 0x9d6173ede679e8ce63fd045fb555f6, 0xd2e31fe69c219de77987b49e09ae4c, 0x5efdecf38ca4ea1f26276d069666e9, 0xfebe4ade67425008aa2a5a4212e344, 0xaa
    ],
        [
        0xfd2b6ccc727827338c0c566bea194c, 0x3a62003751c9ea07ca7a99c611643c, 0xd25d056e0971af706e03161bcdc3d2, 0xda5fc1711dcd75a001dc654eb2f75e, 0xf90765253aee27586e35a1f012f9ab, 0x6991cf6c02b38e3c06a22afa9bbe9e, 0xb0ab86639b7cf8ecaa66374d7d90eb, 0xa5595bb3641e19220dc0da96f8ac72, 0x0a6f35128d83132bd06e0eee02da91, 0xe95d24fb36a7557b086b8c694ebc8f, 0x4f0c4e680993e854443361a4e6673e, 0x873f5b5d95b0040542c50276ab5b98, 0xdff3a1c7dc278f579c0ba76480f6d3, 0xf09ab7e3646e8b45417e7538eaf706, 0x609fb064b03b5302797f26d912f5e4, 0xd3e6a64488b735310a6c55bf15ac5e, 0x4330db35fe1f3d9496bdce5eb2320e, 0x017f
    ]
    );

    let rsa: RSA2048 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));

    // ====================

    let signature: BigNum<18, Params2048> = BigNum::from_array(
        [
        0x39be2f551ef49fc4cbb4ca6852e5cc, 0x648fbf64a402aa292ad5c44f4d86de, 0x69ebfd308ac5ebfc698e748ec4d5f7, 0x1238e0f365352946f743a0f16ded1e, 0x0aff992eefaf5d1d6ffdc64d6d4d3c, 0xfd175c8a3fbae8777f1624af10e9d7, 0x8a7cc41465a8d90377243ef617d77b, 0x0847552793bf16d661380f6c1fd64b, 0xb93accc82b206a96ff0e731b1ad797, 0xc7b2b665f2dec60cc6c8b9aedac847, 0xeee9031594611e69ed2f84290d0725, 0xeecba380776a07633030e981657b3f, 0xdf4311dfd1e24a58c0044cf443b553, 0x051c4f94d7dfdfd75f7a2674a5010c, 0x1c78ab97b78d9dbbc33d5eb6f07493, 0x438347f0b321172ee4ae2fd9e87c7f, 0xbf7f70559768e00a1ea55e15714125, 0xbc
    ]
    );
    let BNInstance: BNInst2048 = BigNumInstance::new(
        [
        0xf20220fb2d5c56969dcf6f0b0080e7, 0x7f1a60aab2059510e964eb7237170d, 0xc92b47ef90caa6860a8f09c2339981, 0xce9101ee862120a3f7745f5929454f, 0x05e17eeaeafab30ef2372162ca251f, 0xa5d68733651834cab90f5e888507ba, 0xf009c8fc4c07fa06b59ebe4ae49e72, 0x5d5646c3845a588539ddd9a47b40cf, 0x679c86e09080c691d6055bdc39d15c, 0xf75012f1ba22050e354cdb9ca510, 0x65cd79b070228a2663219bccb35105, 0xdf17fed22aced973c9d9ef0785907a, 0x4d99dba8a4d6eb2ea53050ced2661b, 0x85a8d92d70411e978894e208c360c2, 0x8eaf39b4ae5857d41a7eb3c0c6259d, 0x782ae38eac36b40246dafbf4569dab, 0xeeb32ed019b9d03a72895dc46a87a3, 0xc3
    ],
        [
        0xdd5d437966f1ea93a969285091ff6c, 0x745450e64ab6240481a28a46b83b3f, 0xdd5180fd460c58d5ff34b20622d0d7, 0x02f363124ec1414f3adb77d4dbb93d, 0x4d09274d4e51278f0f9d639fb2a6cf, 0xbd69c261c0431b434575881244058e, 0x1d11522b6793377f8ec7d9d8ef1b10, 0x4c4324d39842cb9de638826e9486c2, 0xd14fd3c95706cdc96c68b2ed0d05d3, 0xbc86cda19a62d43dfef6024bd49890, 0xdbee7e91b9c85d0ea991733bcb57f2, 0x5de9d849e6c307b13b2f0881eef757, 0x96c273383ab5db40da1eadf9c7f820, 0xd7730e5aa8e381ce3e28f9f2358d89, 0xb5eafa3c474fab9052f59c6fca2716, 0x9d7b95e5cb1d3fda19fbe15e26fdee, 0x7b906be00079411642b1c85db5435f, 0x014e
    ]
    );

    let rsa: RSA2048 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));

    // =====================

    let signature: BigNum<18, Params2048> = BigNum::from_array(
        [
        0xd19089156f197e319ca3b1398df2a7, 0x6ff6f4f2993dd318c232fca1fced91, 0xfffcf7e3d110158f31bf66a2763e87, 0x6f717913a2e8142a3af93528c04fe9, 0xcb9bd50e0fc18d91f7bef5967b4871, 0x5c7d5ba391097a5a029e01470995df, 0x8b2383d2fc10ceb6b3cbcc2786347d, 0x68a1b8f1520765f0ef5ea930e6aa0d, 0x5b551297720020891a5a5be7ceaf24, 0x9960ed71f71ac9523c5fb30b0ff8ae, 0xbf2e77c584c84fec9c0e91d827aba7, 0xa160e177218b88eca866f593c1db6a, 0x1a16f9670f429eaf47bf11ca715d44, 0x8935d478ee2a73c5cd8417cde29a17, 0x29e661cb17cb75d0004fdbde7e35ae, 0xad7df49707cef86994c30206b3892d, 0x082b4ad32ca13bbf899bf7ce2087fd, 0x29
    ]
    );
    let BNInstance: BNInst2048 = BigNumInstance::new(
        [
        0x1844ecbdcba79b49117fc511782003, 0x1e735ab026b43fd82ba4c179900dd1, 0x74c92628e84b146f83752d4f7ed4df, 0x0b40178ed1ec0cf0061b949909020e, 0x428691f8d4ab037abf71a381b2c093, 0xc75d9fa4aa8efdc75271ec10e2d019, 0x5505a64ea96ac676490b5917eacfc5, 0x866f3959ffdb8747750b76d7ba4ef7, 0x8df81f7397e386ddf0ae055dfefe83, 0x5edca330f7e9fba1d01c2809b31139, 0x7b71cbfcb4aac80d4914723e98ec58, 0xf6075e09792a1c6acf600aa115e551, 0x59cff4dfee60867542ba0ef65bf211, 0x4f73f2a65569dcbb4eef4c7c55e235, 0xb103c990db60fdb44234848be06a24, 0xb4337e9161351bdae5ea62f9584803, 0x938365ab815fb4e0557cea90f8b97a, 0xcc
    ],
        [
        0xe4b57707c7ce731bc204c2c342413c, 0xede3b9e0630b6469abec10b24299a3, 0xde8e3385cb6970be5d542c8326cb97, 0x9df76dcbb6b7208d70fcd6c4e92708, 0x7fde490755111652f3615f116cce05, 0x3c9e6320926144852db64a0f678de2, 0xb11dc5d09298a360106b85dd3288be, 0xcac97fb7920c99ace9e72b5b91d2e8, 0x32b5dc141a40b57f40cff9a3f04fd4, 0x893209f7c42588ebc1814e4c8d1b76, 0x58cf0cad63dd9d27e41739a69fed54, 0xc586916f26d6e8dbd3643893c5b014, 0xd2fa020640e4a88e13f959e5b4c6c5, 0x0a22d158ef962cfd0513c84ab8ab4b, 0xc41d4f45236407a38ac746e388db3b, 0xa99e3f354a5fd97834cdbc4d7dc205, 0x599bc1db9ebb03f9125ad1318b8bcd, 0x0140
    ]
    );

    let rsa: RSA2048 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));

    // =================

    let signature: BigNum<18, Params2048> = BigNum::from_array(
        [
        0xef431172bb833c4f7c33f174994eb4, 0x9cd0dfaa62561849c6e887fb03eec3, 0x81e7ac9d4048e583bb1f719aa2da58, 0x367d5ff0c422f3a56cd53becaf5abb, 0x6663e02dd2251ac5425c17b94afe3a, 0x22477ccfe9ce8b372439d8350e1218, 0xe93f45610c77a1cf920a17842dec1a, 0x748c2543161a3ad212a3131d53befb, 0x788088435a056f810ee5a7482234fb, 0x6c2b1fe3af81eaad0c2d5d695e228b, 0x28aae3aa9130253ad2cf554a18b7d9, 0xa6c90d84b6a79e2c28b6691ca111d5, 0x37713b117790b52ff85cca3d9861e9, 0xabe132155825a58c807b963f2522bd, 0xa6bd463baa6c722ed7e577fb3d0ef3, 0x3b37e2f1601143dfb6290f0cb9d715, 0x7230834fd6d43ce47affc0552dfe5f, 0x83
    ]
    );
    let BNInstance: BNInst2048 = BigNumInstance::new(
        [
        0x59f82429b36dae6dc488dbbd3d10c1, 0x7431bc6ed6cc1c181a49bda5601119, 0xeae31a26124a1820014a2058cb92e4, 0xac92072063d3f003ead4c1c342a763, 0x0a934a41f44f5a3b6391a8a4fddaf4, 0x7e5e13ac16e166b1de03a8928359d7, 0x638cbb11d24ea3d8b24e90137ff55e, 0x379d4ab24bd60bce50fd4e2bea7096, 0x0ca6e9fdb106cf246e28f8cd6177b2, 0x3d765c1b7c0b21bf41a2daf6e14954, 0x31be656c9a2992fd5e848ac9a7b448, 0x4851579861c9e6ff5b90b583f0d215, 0x8201cef2fca966327ca616b34625fb, 0x9679d8c0afca664e47c4c323303385, 0x1631741b21ab3a07da2b2253930400, 0xffa572f9934cb5eabae1cc179af367, 0xaa7459a487be607ded05e88249aa7e, 0x9d
    ],
        [
        0x9d9d7c24f8c986e6aeb5173183ad23, 0xc3d7839b196498068ee06fcd1ab1d4, 0x89494b25991cef419dd2a3b4a638f1, 0xa9d169aaece6f61d36bdbc43331d0d, 0x5bb9f2329e6503529a1911ebc662e3, 0xcebec0e3029ab4e295b8954149cd72, 0x70f337a1d0812c493cf4b69e03635a, 0x0b19f5a28d26eff96264d7ec7900fe, 0x5354b04348bb5123567e0998b023e8, 0x4f26944cab3f86867729a0895e181d, 0x42e9c621621b372b0c910df4212bf1, 0xb91b7c100e7eed7c56d4a753f3f10c, 0xd198f39a3c3752bed3697119765fb0, 0x79d006638e466fef8118ad42130de7, 0xd77809d69e7ddb7e9ec57b14fa45a3, 0x6d19d69a329f234abc0582430a42e9, 0xa9f69241160231936af88c4c9c92f4, 0x019f
    ]
    );

    let rsa: RSA2048 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));

    // =================

    let signature: BigNum<18, Params2048> = BigNum::from_array(
        [
        0xbffcbed8a0ffae6db512bf76d52780, 0xd86a0d3d15beec2b25c5b1efde514a, 0x714a0fe3e0f295bda09f785faa8db1, 0xe2edb958c3c107c97b7e46fc25d6e0, 0xeef22811967e24f29b0d18db2c7381, 0xba5107d0541b6617cbd9edc3485ff2, 0x3ec2d36cd029c82a9167a9cf9d74fc, 0x1d73b2a519161049dab567a72bfe95, 0xca2ef4180606a631cff69a5b402740, 0x6d0420f3765c4837b10379be64fb88, 0x79f7c268502e61e2885f7ff7046dda, 0x1f62ada70bbe4a698b25385bf27ff9, 0x2a6afbe4c2f8fe0bd3511bb4dbfdbe, 0x86d0b918fea3729c265e24d2cb6923, 0xe61ea677ef9a35e980e90292ccf0c9, 0xbf230cca9c4590f4c61b35ee394c1a, 0x45b16b3b1b95fceacec10dcda5de54, 0x27
    ]
    );
    let BNInstance: BNInst2048 = BigNumInstance::new(
        [
        0x233e7f2966c885e6f7c276837d899b, 0x2ba765e340adaa7522e1867c822d7a, 0x9b5311689635ef69e2c1ede0844e4a, 0x4f7b9dc10279b566b45504cb8b4b6e, 0x374dd9f5524219b300d91af5295dbe, 0xc927025bfe7e642e6270673142fa65, 0xafaecb5cb0f82dd52ee9b2960065bc, 0x53b6aad1c8c86ca8dfaf8dca84c222, 0x8b68ccadc61d312f79c75a9f4ce9b4, 0x514e9d6a48cab31b51c6897d7e956a, 0x12bd4ceef86b0d8dbdc3e44f3e1926, 0x22920c974c9fde1ad8efb025f94478, 0x6b331e8dc9196f70d5fdd5d3f44113, 0xfd802f01b00a072a4bc9f4e8278a0c, 0xa891231fdb112fd630059e9a38d623, 0x5cc7bc1824f0ce6dd37311a05a4e37, 0xc179edc3b347b887b03a78c47db4c8, 0x95
    ],
        [
        0x013af5d7a6483718e9e59d89107fc0, 0x726f378fc36ff74e79a1da36cefea9, 0xc58518f34da091fe24b961fcd750f3, 0xe25c40b4e2f730b38d78d677464e38, 0x54094f48acd263723e81404ab1bf4e, 0xc280e48da4e6dca8d6c5a0bc087466, 0xa6e54887f437d780ecc34e255c29fe, 0x9e82d8d384f1e416cbfb266f1e61d3, 0xc8624600b7949047a2cd87c461cfc1, 0xfe93eea02ef676912622ef74836198, 0xaac94b675606874961fae03e0edc0c, 0x473c3ee538551d29b39e970d03a0bc, 0xc7b1fca593b0af7887bd8155405603, 0xce995148aba594a7297356090d7dbd, 0x60c859e11985a5693821202cac4f68, 0x708979468f0aa6c54e2a42b60f23ff, 0x9e8466c34572f831e765d881446f1c, 0x01b5
    ]
    );

    let rsa: RSA2048 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));

    // ==================

    let signature: BigNum<18, Params2048> = BigNum::from_array(
        [
        0xbffcbed8a0ffae6db512bf76d52780, 0xd86a0d3d15beec2b25c5b1efde514a, 0x714a0fe3e0f295bda09f785faa8db1, 0xe2edb958c3c107c97b7e46fc25d6e0, 0xeef22811967e24f29b0d18db2c7381, 0xba5107d0541b6617cbd9edc3485ff2, 0x3ec2d36cd029c82a9167a9cf9d74fc, 0x1d73b2a519161049dab567a72bfe95, 0xca2ef4180606a631cff69a5b402740, 0x6d0420f3765c4837b10379be64fb88, 0x79f7c268502e61e2885f7ff7046dda, 0x1f62ada70bbe4a698b25385bf27ff9, 0x2a6afbe4c2f8fe0bd3511bb4dbfdbe, 0x86d0b918fea3729c265e24d2cb6923, 0xe61ea677ef9a35e980e90292ccf0c9, 0xbf230cca9c4590f4c61b35ee394c1a, 0x45b16b3b1b95fceacec10dcda5de54, 0x27
    ]
    );
    let BNInstance: BNInst2048 = BigNumInstance::new(
        [
        0x233e7f2966c885e6f7c276837d899b, 0x2ba765e340adaa7522e1867c822d7a, 0x9b5311689635ef69e2c1ede0844e4a, 0x4f7b9dc10279b566b45504cb8b4b6e, 0x374dd9f5524219b300d91af5295dbe, 0xc927025bfe7e642e6270673142fa65, 0xafaecb5cb0f82dd52ee9b2960065bc, 0x53b6aad1c8c86ca8dfaf8dca84c222, 0x8b68ccadc61d312f79c75a9f4ce9b4, 0x514e9d6a48cab31b51c6897d7e956a, 0x12bd4ceef86b0d8dbdc3e44f3e1926, 0x22920c974c9fde1ad8efb025f94478, 0x6b331e8dc9196f70d5fdd5d3f44113, 0xfd802f01b00a072a4bc9f4e8278a0c, 0xa891231fdb112fd630059e9a38d623, 0x5cc7bc1824f0ce6dd37311a05a4e37, 0xc179edc3b347b887b03a78c47db4c8, 0x95
    ],
        [
        0x013af5d7a6483718e9e59d89107fc0, 0x726f378fc36ff74e79a1da36cefea9, 0xc58518f34da091fe24b961fcd750f3, 0xe25c40b4e2f730b38d78d677464e38, 0x54094f48acd263723e81404ab1bf4e, 0xc280e48da4e6dca8d6c5a0bc087466, 0xa6e54887f437d780ecc34e255c29fe, 0x9e82d8d384f1e416cbfb266f1e61d3, 0xc8624600b7949047a2cd87c461cfc1, 0xfe93eea02ef676912622ef74836198, 0xaac94b675606874961fae03e0edc0c, 0x473c3ee538551d29b39e970d03a0bc, 0xc7b1fca593b0af7887bd8155405603, 0xce995148aba594a7297356090d7dbd, 0x60c859e11985a5693821202cac4f68, 0x708979468f0aa6c54e2a42b60f23ff, 0x9e8466c34572f831e765d881446f1c, 0x01b5
    ]
    );
    let rsa: RSA2048 = RSA {};
    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature));
}

fn main() {
    verify_sha256_pkcs1v15_1024();
}
